{"version":3,"sources":["Background.js","Bullet.js","CollisionHelper.js","ContinueDialog.js","Enemy.js","Fighter.js","FitScreen.js","GLInitScene.js","main.js","MainScene.js","MainScene2.js","PositionHelper.js","ShotBullet.js","StageSequencer.js","TiledAsset.js","enemy/Middle1.js","enemy/TankSmall.js","enemy/Zako1.js","enemy/Zako2.js","glsprite/GLApp.js","glsprite/GLAppRenderer.js","glsprite/GLLoadingScene.js","glsprite/GLScene.js","glsprite/GLSingleSprite.js","glsprite/GLSprite.js","glsprite/GLTiledMap.js","glsprite/Lighting.js","glsprite/PointLight.js","glsprite/TextureAsset.js","megaparticle/Emitter.js","megaparticle/ParticleSystem.js","particle2dx/ColoredTexture.js","particle2dx/Emitter.js","particle2dx/EmitterGL.js","particle2dx/fire.json","particle2dx/fire.png","particle2dx/Particle.js","particle2dx/ParticleCanvas.js","particle2dx/ParticleGLLayer.js","particle2dx/rain.json","particle2dx/rain.png","particle2dx/square.png","postprocessing/Add.js","postprocessing/Blur.js","postprocessing/Emission.js","postprocessing/Merge.js","postprocessing/PostProcessingPass.js","postprocessing/StartPass.js","stage/Stage1.js"],"names":[],"mappingsnxtrNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxhmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnpzQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACttIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnlEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvfile":"bundle.js","sourcesContent":["phina.namespace(() => {\r\n\r\n  phina.define(\"Background\", {\r\n    superClass: \"DisplayElement\",\r\n\r\n    init: function (params) {\r\n      this.superInit();\r\n\r\n      this.speed = params.speed;\r\n      const spriteArray = params.spriteArray;\r\n\r\n      this.fromJSON({\r\n        children: Array.range(0, 9).map(() => {\r\n          return {\r\n            className: \"GLSprite\",\r\n            arguments: {\r\n              spriteArray,\r\n              image: \"bg.png\",\r\n            },\r\n            scaleX: 512 / 1024, scaleY: 512 / 1024,\r\n            z: 20,\r\n          };\r\n        }),\r\n      });\r\n\r\n      this.scrollX = 0;\r\n      this.scrollY = 0;\r\n      this.vx = 0;\r\n      this.vy = 0;\r\n    },\r\n\r\n    update: function() {\r\n      this.scrollX += this.vx * this.speed;\r\n      this.scrollY += this.vy * this.speed;\r\n    },\r\n\r\n    _accessor: {\r\n      scrollX: {\r\n        get: function () {\r\n          return this._scrollX;\r\n        },\r\n        set: function (v) {\r\n          this._scrollX = v;\r\n          const base = CANVAS_WIDTH * 0.5 + this._scrollX % 512;\r\n          this.children[0].x = base + 512 * -1;\r\n          this.children[1].x = base + 512 * 0;\r\n          this.children[2].x = base + 512 * 1;\r\n          this.children[3].x = base + 512 * -1;\r\n          this.children[4].x = base + 512 * 0;\r\n          this.children[5].x = base + 512 * 1;\r\n          this.children[6].x = base + 512 * -1;\r\n          this.children[7].x = base + 512 * 0;\r\n          this.children[8].x = base + 512 * 1;\r\n        },\r\n      },\r\n      scrollY: {\r\n        get: function () {\r\n          return this._scrollY;\r\n        },\r\n        set: function (v) {\r\n          this._scrollY = v;\r\n          const base = CANVAS_HEIGHT * 0.5 + this._scrollY % 512;\r\n          this.children[0].y = base + 512 * -1;\r\n          this.children[1].y = base + 512 * -1;\r\n          this.children[2].y = base + 512 * -1;\r\n          this.children[3].y = base + 512 * 0;\r\n          this.children[4].y = base + 512 * 0;\r\n          this.children[5].y = base + 512 * 0;\r\n          this.children[6].y = base + 512 * 1;\r\n          this.children[7].y = base + 512 * 1;\r\n          this.children[8].y = base + 512 * 1;\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"Bullet\", {\r\n    superClass: \"GLSprite\",\r\n\r\n    init: function (params) {\r\n      this.superInit({\r\n        spriteArray: params.spriteArray,\r\n        image: \"bullet0.png\",\r\n      });\r\n\r\n      this.bullet = null;\r\n      this.power = 0;\r\n      this.r = 0;\r\n      this.dummy = false;\r\n\r\n      this.setScale(0.5, 0.5);\r\n      this.brightness = 1.5;\r\n    },\r\n\r\n    update: function () {\r\n      this.x = this.bullet.x;\r\n      this.y = this.bullet.y;\r\n      this.rotation += 10;\r\n      if (this.x < CANVAS_WIDTH * -0.1 || CANVAS_WIDTH * 1.1 <= this.x || this.y < CANVAS_HEIGHT * -0.1 || CANVAS_HEIGHT * 1.1 <= this.y) {\r\n        this.remove();\r\n      }\r\n    },\r\n\r\n    setBullet: function (bullet, spec) {\r\n      this.x = bullet.x;\r\n      this.y = bullet.y;\r\n\r\n      this.bullet = bullet;\r\n      this.bullet.onVanish = () => this.remove();\r\n\r\n      this.power = 1;\r\n      this.r = 12;\r\n\r\n      this.dummy = false;\r\n      this.visible = true;\r\n\r\n      if (spec.label) {\r\n        if (spec.label.startsWith(\"dummy\")) {\r\n          this.dummy = true;\r\n          this.visible = false;\r\n        } else {\r\n          this.setImage(spec.label);\r\n        }\r\n      }\r\n    },\r\n\r\n    onremoved: function () {\r\n      this.bullet.destroy();\r\n      this.bullet = null;\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  const A = Vector2();\r\n  const B = Vector2();\r\n  const S = Vector2();\r\n  const V = Vector2();\r\n\r\n  phina.define(\"CollisionHelper\", {\r\n    _static: {\r\n\r\n      hitTestCircleCircle: function (a, b) {\r\n        // console.log(a.r, b.r);\r\n        return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) <= a.r + b.r;\r\n      },\r\n\r\n      hitTestCircleLine: function (circle, line) {\r\n        S.set(line.b.x - line.a.x, line.b.y - line.a.y);\r\n        A.set(circle.x - line.a.x, circle.y - line.a.y);\r\n        B.set(circle.x - line.b.x, circle.y - line.b.y);\r\n        const radSq = circle.r * circle.r;\r\n\r\n        if (A.lengthSquared() <= radSq || B.lengthSquared() <= radSq) {\r\n          return true;\r\n        } else if (Math.abs(Vector2.cross(S, A)) / S.length() > circle.r) {\r\n          return false;\r\n        } else {\r\n          return Vector2.dot(A, S) * Vector2.dot(B, S) <= 0;\r\n        }\r\n      },\r\n\r\n      raycast: function (origin, vector, circle) {\r\n        V.set(vector.x, vector.y);\r\n        V.normalize();\r\n\r\n        let ox = circle.x;\r\n        let oy = circle.y;\r\n        let r = circle.r;\r\n        let ax = origin.x;\r\n        let ay = origin.y;\r\n        let vx = V.x;\r\n        let vy = V.y;\r\n\r\n        if (vx === 0.0 && vy === 0.0) return null;\r\n\r\n        // 始点が円内にある場合は始点が衝突地点とする\r\n        if ((ax - ox) * (ax - ox) + (ay - oy) * (ay - oy) <= r * r) return origin;\r\n\r\n        // 円の中心点が原点になるように始点をオフセット\r\n        ax -= ox;\r\n        ay -= oy;\r\n\r\n        // 係数tを算出\r\n        const dotAV = ax * vx + ay * vy;\r\n        const dotAA = ax * ax + ay * ay;\r\n        let s = dotAV * dotAV - dotAA + r * r;\r\n        if (Math.abs(s) < 0.000001) {\r\n          s = 0.0; // 誤差修正\r\n        }\r\n\r\n        if (s < 0.0) return null; // 衝突していない\r\n\r\n        const sq = Math.sqrt(s);\r\n        const t1 = -dotAV - sq;\r\n        const t2 = -dotAV + sq;\r\n\r\n        // もしt1及びt2がマイナスだったら始点が\r\n        // 円内にめり込んでいるのでエラーとする\r\n        if (t1 < 0.0 || t2 < 0.0) return null;\r\n\r\n        // 衝突座標を出力\r\n        return {\r\n          x: ax + t1 * vx + ox,\r\n          y: ay + t1 * vy + oy\r\n        };\r\n        // { x: ax + t2 * vx + ox, y: ay + t2 * vy + oy };\r\n      },\r\n\r\n    },\r\n\r\n    init: function () { },\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"ContinueDialog\", {\r\n    superClass: \"DisplayElement\",\r\n\r\n    init: function () {\r\n      this.superInit();\r\n\r\n      this.fromJSON({\r\n        children: {\r\n          label: {\r\n            className: \"Label\",\r\n            arguments: {\r\n              text: \"continue?\",\r\n              fill: \"white\",\r\n              stroke: null,\r\n              align: \"center\",\r\n              fontSize: 40,\r\n            },\r\n            x: CANVAS_WIDTH * 0.5,\r\n            y: CANVAS_HEIGHT * 0.4,\r\n          },\r\n          yes: {\r\n            className: \"Label\",\r\n            arguments: {\r\n              text: \"yes : [Z]key\",\r\n              fill: \"white\",\r\n              stroke: null,\r\n              align: \"center\",\r\n              fontSize: 30,\r\n            },\r\n            x: CANVAS_WIDTH * 0.25,\r\n            y: CANVAS_HEIGHT * 0.6,\r\n          },\r\n          no: {\r\n            className: \"Label\",\r\n            arguments: {\r\n              text: \"no : [X]key\",\r\n              fill: \"white\",\r\n              stroke: null,\r\n              align: \"center\",\r\n              fontSize: 30,\r\n            },\r\n            x: CANVAS_WIDTH * 0.75,\r\n            y: CANVAS_HEIGHT * 0.6,\r\n          },\r\n        },\r\n      });\r\n    },\r\n\r\n    update: function (app) {\r\n      if (app.controlMode == \"keyboard\") {\r\n        this.yes.text = \"yes : [Z]key\";\r\n        this.no.text = \"no : [X]key\";\r\n      } else if (app.controlMode == \"gamepad\") {\r\n        this.yes.text = \"yes : [A]button\";\r\n        this.no.text = \"no : [B]button\";\r\n      }\r\n\r\n      if (app.controlMode == \"gamepad\") {\r\n        const gp = app.gamepads.get();\r\n        if (gp.getKeyDown(\"a\")) {\r\n          this.flare(\"yes\");\r\n        } else if (gp.getKeyDown(\"b\")) {\r\n          this.flare(\"no\");\r\n        }\r\n      } else if (app.controlMode == \"keyboard\") {\r\n        const kb = app.keyboard;\r\n        if (kb.getKeyDown(\"z\")) {\r\n          this.flare(\"yes\");\r\n        } else if (kb.getKeyDown(\"x\")) {\r\n          this.flare(\"no\");\r\n        }\r\n      }\r\n    },\r\n  });\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"Enemy\", {\r\n    superClass: \"DisplayElement\",\r\n\r\n    entered: false,\r\n    killed: false,\r\n\r\n    hp: 0,\r\n    r: 0,\r\n    power: 1,\r\n\r\n    bullet: null,\r\n    type: null,\r\n\r\n    init: function (params) {\r\n      this.superInit();\r\n\r\n      this.type = \"air\";\r\n      this.pubTw = Tweener().attachTo(this);\r\n\r\n      this.bullet = BulletML.Bullet.get();\r\n      if (params.bulletml) {\r\n        this.bulletml = AssetManager.get(\"xml\", params.bulletml).data;\r\n      }\r\n\r\n      this.entered = false;\r\n      this.killed = false;\r\n\r\n      this.tweener\r\n        .clear()\r\n        .wait(params.wait)\r\n        .call(() => this.start());\r\n    },\r\n\r\n    onremoved: function () {\r\n      if (this.bullet) {\r\n        this.bullet.destroy();\r\n        this.bullet = null;\r\n      }\r\n    },\r\n\r\n    start: function () {\r\n    },\r\n\r\n    pauseAttack: function () {\r\n      if (this.bullet && this.bullet.runner) {\r\n        this.bullet.runner.running = false;\r\n      }\r\n    },\r\n    resumeAttack: function () {\r\n      if (this.bullet && this.bullet.runner) {\r\n        this.bullet.runner.running = true;\r\n      }\r\n    },\r\n\r\n    update: function (app) {\r\n      if (this.bullet) {\r\n        this.bullet.x = this.x;\r\n        this.bullet.y = this.y;\r\n      }\r\n      if (!this.entered && this.inScreen()) {\r\n        this.entered = true;\r\n        this.flare(\"enter\");\r\n      }\r\n    },\r\n\r\n    damage: function (power) {\r\n      if (!this.entered) return false;\r\n\r\n      this.hp -= power;\r\n      const killed = this.hp <= 0;\r\n      if (killed) {\r\n        this.flare(\"killed\");\r\n      }\r\n\r\n      return killed;\r\n    },\r\n\r\n    inScreen: function () {\r\n      return 0 <= this.x && this.x < CANVAS_WIDTH && 0 <= this.y && this.y < CANVAS_HEIGHT;\r\n    },\r\n    inWorld: function () {\r\n      return CANVAS_WIDTH * -0.2 <= this.x && this.x < CANVAS_WIDTH * 1.2 && CANVAS_HEIGHT * -0.2 <= this.y && this.y < CANVAS_HEIGHT * 1.2;\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  const SPEED = 0.3;\r\n  const SPEED_SLOW = SPEED * 0.5;\r\n  const HEAT_BY_FIRE = 100;\r\n\r\n  const controller = {\r\n    moveDelta: Vector2(0, 0),\r\n    fire: false,\r\n    bomb: false,\r\n    slow: false,\r\n  };\r\n\r\n  phina.define(\"Fighter\", {\r\n    superClass: \"GLSprite\",\r\n\r\n    _static: {\r\n      instance: null,\r\n    },\r\n\r\n    init: function (params) {\r\n      this.superInit({\r\n        spriteArray: params.spriteArray,\r\n        image: \"fighterC4.png\",\r\n      });\r\n\r\n      Fighter.instance = this;\r\n\r\n      this.r = 0;\r\n      this.boundingType = \"circle\";\r\n      this.controllable = false;\r\n      this._muteki = true;\r\n      this.heat = 0;\r\n\r\n      this.controlMode = \"keyboard\";\r\n    },\r\n\r\n    update: function (app) {\r\n      if (this.controllable) {\r\n        const dt = app.deltaTime;\r\n\r\n        if (app.controlMode == \"gamepad\") {\r\n          const gp = app.gamepads.get();\r\n          const ls = gp.getStickDirection();\r\n\r\n          controller.moveDelta.x = Math.round(ls.x);\r\n          controller.moveDelta.y = Math.round(ls.y);\r\n          controller.fire = gp.getKey(\"r2\") || gp.getKey(\"x\");\r\n          controller.slow = gp.getKey(\"a\");\r\n        } else if (app.controlMode == \"keyboard\") {\r\n          const kb = app.keyboard;\r\n\r\n          controller.moveDelta.x = (kb.getKey(\"a\") || kb.getKey(\"left\")) ? -1 : (kb.getKey(\"d\") || kb.getKey(\"right\")) ? 1 : 0\r\n          controller.moveDelta.y = (kb.getKey(\"w\") || kb.getKey(\"up\")) ? -1 : (kb.getKey(\"s\") || kb.getKey(\"down\")) ? 1 : 0\r\n          controller.fire = kb.getKey(\"z\");\r\n          controller.slow = kb.getKey(\"shift\");\r\n        }\r\n\r\n        controller.moveDelta.normalize();\r\n        const speed = controller.slow ? SPEED_SLOW : SPEED;\r\n\r\n        this.position.x += controller.moveDelta.x * speed * dt;\r\n        this.position.y += controller.moveDelta.y * speed * dt;\r\n        this.position.x = Math.clamp(this.position.x, SCREEN_X + 10, SCREEN_X + SCREEN_W - 10);\r\n        this.position.y = Math.clamp(this.position.y, SCREEN_Y + 10, SCREEN_Y + SCREEN_H - 10);\r\n\r\n        if (controller.fire && this.heat <= 0) {\r\n          if (controller.slow) {\r\n            this.flare(\"firebullet\", { angle: Math.PI * -0.5 + 0.02, pos: { x: -24, y: 20 } });\r\n            this.flare(\"firebullet\", { angle: Math.PI * -0.5 + 0.01, pos: { x: -16, y: 20 } });\r\n            this.flare(\"firebullet\", { angle: Math.PI * -0.5, pos: { x: -6, y: 0 } });\r\n            this.flare(\"firebullet\", { angle: Math.PI * -0.5, pos: { x: 6, y: 0 } });\r\n            this.flare(\"firebullet\", { angle: Math.PI * -0.5 - 0.01, pos: { x: 16, y: 20 } });\r\n            this.flare(\"firebullet\", { angle: Math.PI * -0.5 - 0.02, pos: { x: 24, y: 20 } });\r\n          } else {\r\n            this.flare(\"firebullet\", { angle: Math.PI * -0.5 - 0.2, pos: { x: -24, y: 28 } });\r\n            this.flare(\"firebullet\", { angle: Math.PI * -0.5 - 0.1, pos: { x: -16, y: 20 } });\r\n            this.flare(\"firebullet\", { angle: Math.PI * -0.5, pos: { x: -6, y: 0 } });\r\n            this.flare(\"firebullet\", { angle: Math.PI * -0.5, pos: { x: 6, y: 0 } });\r\n            this.flare(\"firebullet\", { angle: Math.PI * -0.5 + 0.1, pos: { x: 16, y: 20 } });\r\n            this.flare(\"firebullet\", { angle: Math.PI * -0.5 + 0.2, pos: { x: 24, y: 28 } });\r\n          }\r\n          this.heat = HEAT_BY_FIRE;\r\n        }\r\n\r\n        this.heat -= dt;\r\n      } else {\r\n        this.heat = 0;\r\n      }\r\n    },\r\n\r\n    launch: function () {\r\n      this.tweener\r\n        .clear()\r\n        .set({\r\n          visible: true,\r\n          x: SCREEN_X + SCREEN_W * 0.2,\r\n          y: SCREEN_Y + SCREEN_H * 1.2,\r\n          controllable: false,\r\n          muteki: true,\r\n        })\r\n        .wait(1000)\r\n        .to({\r\n          y: SCREEN_Y + SCREEN_H * 0.9,\r\n        }, 800, \"easeOutBack\")\r\n        .set({\r\n          controllable: true,\r\n        })\r\n        .wait(1000)\r\n        .set({\r\n          muteki: false,\r\n        });\r\n\r\n      return this;\r\n    },\r\n\r\n    damage: function (power) {\r\n      // this.killed();\r\n    },\r\n\r\n    killed: function () {\r\n      this.controllable = false;\r\n      this.muteki = true;\r\n      this.flare(\"killed\");\r\n    },\r\n\r\n    _accessor: {\r\n      muteki: {\r\n        get: function () {\r\n          return this._muteki;\r\n        },\r\n        set: function (v) {\r\n          this._muteki = v;\r\n        },\r\n      }\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"FitScreen\", {\r\n\r\n    init: function () { },\r\n\r\n    _static: {\r\n      fit: function (canvas) {\r\n        document.body.style.overflow = \"hidden\";\r\n\r\n        const _fitFunc = () => {\r\n          const e = canvas;\r\n          const s = e.style;\r\n\r\n          s.position = \"absolute\";\r\n          s.margin = \"auto\";\r\n          s.left = \"0px\";\r\n          s.top = \"0px\";\r\n          s.bottom = \"0px\";\r\n          s.right = \"0px\";\r\n\r\n          const rateWidth = SCREEN_W / window.innerWidth;\r\n          const rateHeight = SCREEN_H / window.innerHeight;\r\n          const screenRate = SCREEN_H / SCREEN_W;\r\n          const canvasRate = CANVAS_HEIGHT / CANVAS_WIDTH;\r\n\r\n          if (rateWidth > rateHeight) {\r\n            s.width = Math.floor(innerWidth * screenRate / canvasRate) + \"px\";\r\n            s.height = Math.floor(innerWidth * screenRate) + \"px\";\r\n            s.left = Math.floor((innerWidth - innerWidth * screenRate / canvasRate) / 2) + \"px\";\r\n          } else {\r\n            s.width = Math.floor(innerHeight / canvasRate) + \"px\";\r\n            s.height = Math.floor(innerHeight) + \"px\";\r\n            s.left = Math.floor((innerWidth - innerHeight / canvasRate) / 2) + \"px\";\r\n          }\r\n        };\r\n\r\n        _fitFunc();\r\n\r\n        phina.global.addEventListener(\"resize\", _fitFunc, false);\r\n      },\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"GLInitScene\", {\r\n    superClass: \"Scene\",\r\n\r\n    init: function (options) {\r\n      this.superInit();\r\n\r\n      const renderer = options.app.renderer;\r\n      const spec = options.spriteArray;\r\n      for (let name in spec) {\r\n        renderer.addSpriteArray(name, spec[name].atlas, spec[name].max);\r\n      }\r\n      this.one(\"enterframe\", () => this.start());\r\n    },\r\n\r\n    start: function () {\r\n      this.exit();\r\n    },\r\n  });\r\n\r\n});\r\n","const CANVAS_WIDTH = 1024;\r\nconst CANVAS_HEIGHT = 512;\r\nconst SCREEN_X = 114;\r\nconst SCREEN_Y = 0;\r\nconst SCREEN_W = CANVAS_WIDTH - SCREEN_X * 2;\r\nconst SCREEN_H = 512;\r\n\r\nphina.main(() => {\r\n\r\n  const app = GLApp({ width: CANVAS_WIDTH, height: CANVAS_HEIGHT });\r\n  app.replaceScene(ManagerScene({\r\n    scenes: [{\r\n      label: \"loading\",\r\n      className: \"GLLoadingScene\",\r\n      arguments: {\r\n        assets: {\r\n          image: {\r\n            \"black\": \"./asset/image/black.png\",\r\n            \"no_normal\": \"./asset/image/no_normal.png\",\r\n            \"test\": \"./asset/test/fighter_big.png\",\r\n            \"test_n\": \"./asset/test/fighter_big_n.png\",\r\n          },\r\n          xml: {\r\n            \"test\": \"./asset/bulletml/test.xml\",\r\n          },\r\n          atlas: {\r\n            \"common\": \"./asset/image/common.json\",\r\n          },\r\n          vertexShader: {\r\n            \"glsprite.vs\": \"./asset/shader/glsprite.vs\",\r\n            \"glsinglesprite.vs\": \"./asset/shader/glsinglesprite.vs\",\r\n            \"gltiledmap.vs\": \"./asset/shader/gltiledmap.vs\",\r\n          },\r\n          fragmentShader: {\r\n            \"glsprite.fs\": \"./asset/shader/glsprite.fs\",\r\n            \"glsinglesprite.fs\": \"./asset/shader/glsinglesprite.fs\",\r\n            \"gltiledmap.fs\": \"./asset/shader/gltiledmap.fs\",\r\n          },\r\n          tiled: {\r\n            \"test\": \"./asset/map/test.json\",\r\n          },\r\n        },\r\n      },\r\n    }, {\r\n      label: \"glinit\",\r\n      className: \"GLInitScene\",\r\n      arguments: {\r\n        common: { atlas: \"common\", max: 3000 },\r\n      },\r\n    }, {\r\n      label: \"main\",\r\n      className: \"MainScene2\",\r\n      arguments: {\r\n        app: app,\r\n      },\r\n    }],\r\n  }));\r\n\r\n  app.gamepads = GamepadManager();\r\n  app.update = () => {\r\n    app.gamepads.update();\r\n\r\n    const gp = app.gamepads.get();\r\n    if (gp) {\r\n      if ((0.5 * 0.5) < gp.getStickDirection(0).lengthSquared() || (0.5 * 0.5) < gp.getStickDirection(1).lengthSquared() || gp.buttons.some(b => b.down)) {\r\n        app.controlMode = \"gamepad\";\r\n      }\r\n    }\r\n  };\r\n  app.enableStats();\r\n  app.run();\r\n\r\n  document.addEventListener(\"keydown\", () => app.controlMode = \"keyboard\");\r\n  document.addEventListener(\"mousedown\", () => app.controlMode = \"keyboard\");\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"MainScene\", {\r\n    superClass: \"DisplayScene\",\r\n\r\n    init: function () {\r\n      this.superInit();\r\n\r\n      this.fromJSON({\r\n        children: {\r\n          seq: { className: \"Stage1\" },\r\n          bgC: {\r\n            className: \"RectangleShape\",\r\n            arguments: {\r\n              fill: (() => {\r\n                const c = document.createElement(\"canvas\");\r\n                c.width = CANVAS_WIDTH;\r\n                c.height = CANVAS_HEIGHT;\r\n                const ctx = c.getContext(\"2d\");\r\n                const gra = ctx.createRadialGradient(0, CANVAS_HEIGHT * -0.2, 0, 0, 0, CANVAS_HEIGHT * 0.5);\r\n                gra.addColorStop(0.0, \"hsl(220, 90%, 10%)\");\r\n                gra.addColorStop(1.0, \"hsl(220, 90%, 0%)\");\r\n                return gra;\r\n              })(),\r\n              stroke: null,\r\n              padding: 0,\r\n              width: CANVAS_WIDTH,\r\n              height: CANVAS_HEIGHT,\r\n            },\r\n            originX: 0,\r\n            originY: 0,\r\n          },\r\n          bg0: { className: \"Background\", arguments: { speed: 1.0 }, scaleX: 1, scaleY: 1 },\r\n          bg1: { className: \"Background\", arguments: { speed: 0.8 }, scaleX: 0.8, scaleY: 0.8, alpha: 0.5 },\r\n          fighterLayer: { className: \"DisplayElement\" },\r\n          shotLayer: { className: \"DisplayElement\" },\r\n          enemyLayer: { className: \"DisplayElement\" },\r\n          effectLayer: { className: \"DisplayElement\" },\r\n          bulletLayer: { className: \"DisplayElement\" },\r\n          black: {\r\n            className: \"RectangleShape\",\r\n            arguments: {\r\n              fill: \"black\",\r\n              stroke: null,\r\n              padding: 0,\r\n              width: CANVAS_WIDTH,\r\n              height: CANVAS_HEIGHT,\r\n            },\r\n            originX: 0,\r\n            originY: 0,\r\n          },\r\n          uiLayer: { className: \"DisplayElement\" },\r\n        },\r\n      });\r\n\r\n      // fighter\r\n      const fighter = Fighter().hide();\r\n      fighter.on(\"firebullet\", ({ angle, pos }) => {\r\n        const shot = this.shotBullets.find(s => !s.parent);\r\n        if (shot) {\r\n          shot\r\n            .setAngle(angle)\r\n            .setPosition(fighter.x + pos.x, fighter.y + pos.y)\r\n            .addChildTo(this.shotLayer);\r\n        } else {\r\n          console.log(\"ショットたりない\");\r\n        }\r\n      });\r\n      fighter.on(\"killed\", () => {\r\n        this.black.tweener.clear().fadeIn(500);\r\n        fighter.remove();\r\n        this.vanishAllEnemy();\r\n        this.seq.flare(\"miss\");\r\n        const dialog = ContinueDialog().addChildTo(this.uiLayer);\r\n        dialog.on(\"yes\", () => {\r\n          dialog.remove();\r\n          this.restart();\r\n        });\r\n        dialog.on(\"no\", () => {\r\n          dialog.remove();\r\n          this.exit();\r\n        });\r\n      });\r\n      this.fighter = fighter;\r\n\r\n      // shot\r\n      this.shotBullets = Array.range(0, 300).map(() => ShotBullet());\r\n\r\n      // bullet\r\n      this.bullets = Array.range(0, 3000).map(() => Bullet());\r\n      const bulletmlManager = new BulletML.Manager({ player: fighter });\r\n      this.on(\"enterframe\", () => bulletmlManager.update());\r\n      bulletmlManager.onFire = ({ bullet, spec }) => {\r\n        const b = this.bullets.find(b => !b.parent);\r\n        if (b) {\r\n          b.setBullet(bullet, spec);\r\n        } else {\r\n          console.log(\"弾たりない\");\r\n        }\r\n        b.addChildTo(this.bulletLayer);\r\n      };\r\n      this.bulletmlManager = bulletmlManager;\r\n\r\n      // enemy\r\n      this.enemies = [];\r\n      this.seq.on(\"launch\", ({ enemy }) => {\r\n        this.enemies.push(enemy);\r\n        enemy.on(\"effect\", ({ type }) => {\r\n          switch (type) {\r\n            case \"smallExplosion\":\r\n              break;\r\n            case \"middleExplosion\":\r\n              break;\r\n            case \"largeExplosion\":\r\n              break;\r\n          }\r\n        });\r\n        enemy.on(\"killed\", () => {\r\n          enemy.remove();\r\n        });\r\n        enemy.on(\"removed\", () => this.enemies.erase(enemy));\r\n        if (enemy.bulletml) {\r\n          enemy.on(\"attack\", () => {\r\n            const bulletmlRoot = BulletML.parse(enemy.bulletml);\r\n            bulletmlManager.run(enemy.bullet, bulletmlRoot);\r\n          });\r\n        }\r\n        enemy.addChildTo(this.enemyLayer);\r\n      });\r\n\r\n      // stage\r\n      this.seq.on(\"changescroll\", ({ x, y, duration }) => {\r\n        this.bg0.tweener.clear().to({ vx: x, vy: y }, duration);\r\n        this.bg1.tweener.clear().to({ vx: x, vy: y }, duration);\r\n      });\r\n      this.seq.on(\"checkpoint\", () => {\r\n        console.log(\"checkpoint\");\r\n      });\r\n\r\n      this.one(\"enterframe\", () => this.restart());\r\n    },\r\n\r\n    restart: function () {\r\n      this.black.tweener.clear().fadeOut(500);\r\n      this.seq.restart();\r\n      this.fighter.addChildTo(this.fighterLayer);\r\n      this.fighter.launch();\r\n    },\r\n\r\n    update: function () {\r\n      // ショットvs敵\r\n      for (let i = 0, il = this.shotBullets.length; i < il; i++) {\r\n        const s = this.shotBullets[i];\r\n        if (s.parent) {\r\n          for (let j = 0, jl = this.enemies.length; j < jl; j++) {\r\n            const e = this.enemies[j];\r\n            if (CollisionHelper.hitTestCircleLine(e, s)) {\r\n              if (e.damage(s.power)) {\r\n                this.enemies.erase(e);\r\n              }\r\n              const hitPoint = CollisionHelper.raycast(s.a, s.velocity, e);\r\n              if (hitPoint) {\r\n                this.hitEffect(hitPoint.x, hitPoint.y);\r\n              }\r\n              s.remove();\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!this.fighter.muteki) {\r\n        // 敵vs自機\r\n        for (let i = 0, il = this.enemies.length; i < il; i++) {\r\n          const e = this.enemies[i];\r\n          if (e.parent && e.type == \"air\") {\r\n            if (CollisionHelper.hitTestCircleCircle(e, this.fighter)) {\r\n              this.fighter.damage(e.power);\r\n            }\r\n          }\r\n        }\r\n\r\n        // 弾vs自機\r\n        for (let i = 0, il = this.bullets.length; i < il; i++) {\r\n          const b = this.bullets[i];\r\n          if (b.parent && !b.dummy) {\r\n            if (CollisionHelper.hitTestCircleCircle(b, this.fighter)) {\r\n              this.fighter.damage(b.power);\r\n              b.remove();\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        this.vanishAllBullet();\r\n      }\r\n\r\n      // 地上物移動\r\n      for (let i = 0, il = this.enemies.length; i < il; i++) {\r\n        const e = this.enemies[i];\r\n        if (e.parent && e.type == \"ground\") {\r\n          e.x += this.bg0.vx;\r\n          e.y += this.bg0.vy;\r\n        }\r\n      }\r\n    },\r\n\r\n    vanishAllEnemy: function () {\r\n      this.enemies.forEach(e => {\r\n        e.pubTw\r\n          .clear()\r\n          .fadeOut(500)\r\n          .call(() => e.remove());\r\n      });\r\n    },\r\n\r\n    vanishAllBullet: function () {\r\n      this.bullets.forEach(b => {\r\n        if (b.parent) {\r\n          b.remove();\r\n          this.vanishEffect(b.x, b.y);\r\n        }\r\n      });\r\n    },\r\n\r\n    hitEffect: function (x, y) {\r\n\r\n    },\r\n\r\n    vanishEffect: function (x, y) {\r\n\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  // Z値\r\n  // BG 20\r\n  // Enemy 30\r\n  // Fighter 40\r\n  // Shot 50\r\n  // Effect 60\r\n  // Bullet 70～100\r\n  // UI 100～\r\n\r\n  phina.define(\"MainScene2\", {\r\n    superClass: \"GLScene\",\r\n\r\n    init: function (params) {\r\n      this.superInit();\r\n\r\n      const renderer = params.app.renderer;\r\n      const gl = params.app.gl;\r\n\r\n      const commonArray = renderer.getSpriteArray(\"common\");\r\n\r\n      this.bulletTree = new DaiCol.LinearQuadTreeSpace(CANVAS_WIDTH, CANVAS_HEIGHT, 2);\r\n      this.enemyTree = new DaiCol.LinearQuadTreeSpace(CANVAS_WIDTH, CANVAS_HEIGHT, 2);\r\n      this.shotBulletTree = new DaiCol.LinearQuadTreeSpace(CANVAS_WIDTH, CANVAS_HEIGHT, 2);\r\n      this.fighterTree = new DaiCol.LinearQuadTreeSpace(CANVAS_WIDTH, CANVAS_HEIGHT, 2);\r\n\r\n      this.fromJSON({\r\n        children: {\r\n          seq: { className: \"Stage1\" },\r\n          sideL: {\r\n            className: \"GLSprite\",\r\n            arguments: {\r\n              spriteArray: commonArray,\r\n              image: \"black.png\",\r\n            },\r\n            originX: 0, originY: 0,\r\n            scaleX: SCREEN_X / 32, scaleY: SCREEN_H / 32,\r\n            z: 100,\r\n          },\r\n          sideR: {\r\n            className: \"GLSprite\",\r\n            arguments: {\r\n              spriteArray: commonArray,\r\n              image: \"black.png\",\r\n            },\r\n            originX: 1, originY: 0,\r\n            scaleX: (CANVAS_WIDTH - SCREEN_X - SCREEN_W) / 32, scaleY: SCREEN_H / 32,\r\n            x: CANVAS_WIDTH,\r\n            z: 100,\r\n          },\r\n          // bg: { className: \"Background\", arguments: { spriteArray: commonArray, speed: 1.0 } },\r\n          black: {\r\n            className: \"GLSprite\",\r\n            arguments: {\r\n              spriteArray: commonArray,\r\n              image: \"black.png\",\r\n              alphaEnabled: true,\r\n            },\r\n            originX: 0, originY: 0,\r\n            scaleX: CANVAS_WIDTH / 32, scaleY: CANVAS_HEIGHT / 32,\r\n            z: 100,\r\n          },\r\n        },\r\n      });\r\n\r\n      // fighter\r\n      const fighter = Fighter({ spriteArray: commonArray })\r\n        .setZ(40)\r\n        .hide();\r\n      fighter.on(\"firebullet\", ({ angle, pos }) => {\r\n        const shot = this.shotBullets.find(s => !s.parent);\r\n        if (shot) {\r\n          shot\r\n            .setAngle(angle)\r\n            .setPosition(fighter.x + pos.x, fighter.y + pos.y)\r\n            .addChildTo(this);\r\n        } else {\r\n          console.log(\"ショットたりない\");\r\n        }\r\n      });\r\n      fighter.on(\"killed\", () => {\r\n        this.black.tweener.clear().fadeIn(500);\r\n        fighter.remove();\r\n        this.vanishAllEnemy();\r\n        this.seq.flare(\"miss\");\r\n        // const dialog = ContinueDialog().addChildTo(this.uiLayer);\r\n        // dialog.on(\"yes\", () => {\r\n        //   dialog.remove();\r\n        //   this.restart();\r\n        // });\r\n        // dialog.on(\"no\", () => {\r\n        //   dialog.remove();\r\n        //   this.exit();\r\n        // });\r\n      });\r\n      this.fighter = fighter;\r\n\r\n      // shot\r\n      this.shotBullets = Array.range(0, 300).map(() => {\r\n        return ShotBullet({ spriteArray: commonArray }).setZ(50);\r\n      });\r\n\r\n      // bullet\r\n      this.bullets = Array.range(0, 7000).map(() => {\r\n        return Bullet({ spriteArray: commonArray });\r\n      });\r\n      const bulletmlManager = new BulletML.Manager({ player: fighter });\r\n      this.on(\"enterframe\", () => bulletmlManager.update());\r\n      let bulletZ = 70;\r\n      bulletmlManager.onFire = ({ bullet, spec }) => {\r\n        const b = this.bullets.find(b => !b.parent);\r\n        if (b) {\r\n          b.setBullet(bullet, spec);\r\n          bulletZ += 0.001;\r\n          if (100 < bulletZ) bulletZ = 70;\r\n          b.setZ(bulletZ);\r\n          b.addChildTo(this);\r\n        } else {\r\n          console.log(\"弾たりない\");\r\n        }\r\n      };\r\n      this.bulletmlManager = bulletmlManager;\r\n\r\n      // enemy\r\n      this.enemies = [];\r\n\r\n      // stage\r\n      this.seq.on(\"changescroll\", ({ x, y, duration }) => {\r\n        this.bg.tweener.clear().to({ vx: x, vy: y }, duration);\r\n      });\r\n      this.seq.on(\"checkpoint\", () => {\r\n        console.log(\"checkpoint\");\r\n      });\r\n\r\n      this.one(\"enterframe\", () => this.restart());\r\n\r\n      GLTiledMap({ gl, tiledAsset: \"test\" })\r\n        .setZ(20.1)\r\n        .addChildTo(this);\r\n      GLSingleSprite({ gl, image: \"test\" })\r\n        .setPosition(256, 100)\r\n        .setZ(40.1)\r\n        .addChildTo(this);\r\n    },\r\n\r\n    restart: function () {\r\n      this.black.tweener.clear().fadeOut(500);\r\n      // this.seq.restart();\r\n      this.fighter.addChildTo(this);\r\n      this.fighter.launch();\r\n    },\r\n\r\n    update: function () {\r\n      const bulletTree = this.bulletTree;\r\n      const enemyTree = this.enemyTree;\r\n      const shotBulletTree = this.shotBulletTree;\r\n      const fighterTree = this.fighterTree;\r\n\r\n      bulletTree.clear();\r\n      for (let i = 0, len = this.bullets.length; i < len; i++) {\r\n        const b = this.bullets[i];\r\n        if (b.parent || b.visible) bulletTree.addActor(b);\r\n      }\r\n      enemyTree.clear();\r\n      for (let i = 0, len = this.enemies.length; i < len; i++) {\r\n        const e = this.enemies[i];\r\n        if (e.parent && e.visible) enemyTree.addActor(e);\r\n      }\r\n      shotBulletTree.clear();\r\n      for (let i = 0, len = this.shotBullets.length; i < len; i++) {\r\n        const s = this.shotBullets[i];\r\n        if (s.parent) shotBulletTree.addActor(s);\r\n      }\r\n      fighterTree.clear();\r\n      if (this.fighter.parent && !this.fighter.muteki) fighterTree.addActor(this.fighter);\r\n\r\n      // shot vs enemy\r\n      DaiCol.hitTest(shotBulletTree, enemyTree, (s, e) => {\r\n        if (s.parent && e.parent) {\r\n          if (CollisionHelper.hitTestCircleLine(e, s)) {\r\n            e.damage(s.power);\r\n            s.hit();\r\n          }\r\n        }\r\n      });\r\n\r\n      // fighter vs bullet\r\n      if (this.fighter.parent && !this.fighter.muteki) {\r\n        DaiCol.hitTest(fighterTree, bulletTree, (f, b) => {\r\n          if (f.parent && b.parent) {\r\n            if (CollisionHelper.hitTestCircleCircle(f, b)) {\r\n              f.damage(b.power);\r\n              b.remove();\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      // fighter vs enemy\r\n      if (this.fighter.parent && !this.fighter.muteki) {\r\n        DaiCol.hitTest(fighterTree, enemyTree, (f, e) => {\r\n          if (f.parent && e.parent && e.type === \"air\") {\r\n            if (CollisionHelper.hitTestCircleCircle(f, e)) {\r\n              f.damage(e.power);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  const TEMP_V = Vector2();\r\n  const TEMP_M = Matrix33();\r\n\r\n  phina.define(\"PositionHelper\", {\r\n    _static: {\r\n\r\n      rotate: function (x, y, angle) {\r\n        const p = TEMP_V.set(x, y);\r\n        const m = TEMP_M.set(\r\n          Math.cos(angle), -Math.sin(angle), 0,\r\n          Math.sin(angle), Math.cos(angle), 0,\r\n          0, 0, 1,\r\n        );\r\n\r\n        return m.multiplyVector2(p);\r\n      },\r\n\r\n    },\r\n\r\n    init: function () { },\r\n  });\r\n});\r\n","phina.namespace(() => {\r\n\r\n  const SPEED = 18;\r\n\r\n  phina.define(\"ShotBullet\", {\r\n    superClass: \"GLSprite\",\r\n\r\n    init: function (params) {\r\n      this.superInit({\r\n        spriteArray: params.spriteArray,\r\n        image: \"black.png\",\r\n      });\r\n\r\n      this.power = 1;\r\n      this.r = 1;\r\n\r\n      this.beforePosition = Vector2(0, 0);\r\n      this.velocity = Vector2(0, 0);\r\n    },\r\n\r\n    setAngle: function (rad) {\r\n      this.velocity.fromAngle(rad, SPEED);\r\n      this.rotation = rad.toDegree() + 90;\r\n      return this;\r\n    },\r\n\r\n    update: function () {\r\n      this.beforePosition.set(this.x, this.y);\r\n      this.x += this.velocity.x;\r\n      this.y += this.velocity.y;\r\n\r\n      if (this.x < 0 || CANVAS_WIDTH <= this.x || this.y < 0 || CANVAS_HEIGHT <= this.y) {\r\n        this.remove();\r\n      }\r\n    },\r\n\r\n    hit: function () {\r\n      this.remove();\r\n    },\r\n\r\n    _accessor: {\r\n      a: {\r\n        get: function () {\r\n          return this.beforePosition;\r\n        },\r\n      },\r\n      b: {\r\n        get: function () {\r\n          return this.position;\r\n        },\r\n      },\r\n      left: {\r\n        get: function () {\r\n          return Math.min(this.a.x, this.b.x);\r\n        },\r\n        set: function () { },\r\n      },\r\n      right: {\r\n        get: function () {\r\n          return Math.max(this.a.x, this.b.x);\r\n        },\r\n        set: function () { },\r\n      },\r\n      top: {\r\n        get: function () {\r\n          return Math.min(this.a.y, this.b.y);\r\n        },\r\n        set: function () { },\r\n      },\r\n      bottom: {\r\n        get: function () {\r\n          return Math.max(this.a.y, this.b.y);\r\n        },\r\n        set: function () { },\r\n      },\r\n    },\r\n  });\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"StageSequencer\", {\r\n    superClass: \"Element\",\r\n\r\n    init: function () {\r\n      this.superInit();\r\n\r\n      this.wait = 0;\r\n      this.val = { done: false };\r\n\r\n      this.enemies = [];\r\n      this.checkPoint = 0;\r\n    },\r\n\r\n    gen: function* () { },\r\n\r\n    restart: function () {\r\n      this.ite = this.gen();\r\n    },\r\n    onmiss: function () {\r\n    },\r\n    oncheckpoint: function () {\r\n      this.enemies.clear();\r\n      this.checkPoint += 1;\r\n    },\r\n\r\n    update: function (app) {\r\n      if (Fighter.instance.parent) {\r\n        this.wait -= app.deltaTime;\r\n        if (this.ite) {\r\n          while (!this.val.done && this.wait <= 0) {\r\n            this.val = this.ite.next();\r\n            this.wait = this.val.value;\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    launchEnemy: function (className, params, x, y, areaCount = true) {\r\n      const enemy = phina.using(className)(params);\r\n      enemy.x = x + CANVAS_WIDTH * 0.5;\r\n      enemy.y = y;\r\n      this.flare(\"launch\", { enemy });\r\n      if (areaCount) this.enemies.push(enemy);\r\n      return enemy;\r\n    },\r\n\r\n    startMusic: function (name, fadeTime, loop) {\r\n      this.flare(\"startmusic\", { name, fadeTime, loop });\r\n    },\r\n\r\n    stopMusic: function (fadeTime) {\r\n      this.flare(\"stopmusic\", { fadeTime });\r\n    },\r\n\r\n    changeScroll: function (x, y, duration) {\r\n      this.flare(\"changescroll\", { x, y, duration });\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"TiledAsset\", {\r\n    superClass: \"phina.asset.Asset\",\r\n\r\n    init: function () {\r\n      this.superInit();\r\n      this.tilesets = null;\r\n    },\r\n\r\n    _load: function (resolve) {\r\n      const src = this.src.startsWith(\"/\") ? this.src : \"./\" + this.src;\r\n      const basePath = src.substring(0, src.lastIndexOf(\"/\") + 1);\r\n      fetch(src)\r\n        .then(res => res.json())\r\n        .then(json => {\r\n          this.json = json;\r\n          Promise.all(\r\n            json.tilesets.map((ts, id) => Tileset(id, ts).load(basePath + ts.source))\r\n          ).then(tilesets => {\r\n            this.tilesets = tilesets;\r\n            resolve(this);\r\n          });\r\n        });\r\n    },\r\n  });\r\n\r\n  phina.define(\"Tileset\", {\r\n    init: function (id, tileset) {\r\n      this.id = id;\r\n      this.image = null;\r\n      this.normalImage = null;\r\n      this.emissionImage = null;\r\n      this.firstgid = tileset.firstgid;\r\n      this.source = tileset.source;\r\n\r\n      this.json = null;\r\n      this.tilewidth = 0;\r\n      this.tileheight = 0;\r\n      this.imagewidth = 0;\r\n      this.imageheight = 0;\r\n      this.cols = 0;\r\n      this.rows = 0;\r\n    },\r\n\r\n    load: function (path) {\r\n      return new Promise(resolve => {\r\n        fetch(path).then(res => res.json()).then(json => {\r\n          this.json = json;\r\n          this.setup();\r\n          if (json.image) {\r\n            const _path = path.startsWith(\"/\") ? path : \"./\" + path;\r\n            const basePath = _path.substring(0, _path.lastIndexOf(\"/\") + 1);\r\n            Flow.resolve()\r\n              .then(() => {\r\n                this.image = phina.asset.Texture();\r\n                return this.image.load(basePath + json.image);\r\n              })\r\n              .then(() => {\r\n                const filename = json.image.replace(\".png\", \"_n.png\");\r\n                this.normalImage = phina.asset.Texture();\r\n                return this.normalImage.load(basePath + filename);\r\n              })\r\n              .then(() => {\r\n                const filename = json.image.replace(\".png\", \"_e.png\");\r\n                this.emissionImage = phina.asset.Texture();\r\n                return this.emissionImage.load(basePath + filename);\r\n              })\r\n              .then(() => {\r\n                if (json.transparentcolor) {\r\n                  this.procTransparent(json.transparentcolor);\r\n                }\r\n              })\r\n              .then(() => resolve(this));\r\n          } else {\r\n            resolve(this);\r\n          }\r\n        });\r\n      });\r\n    },\r\n\r\n    procTransparent: function (transparentcolor) {\r\n      const r = Number(\"0x\" + transparentcolor.substring(1, 3));\r\n      const g = Number(\"0x\" + transparentcolor.substring(3, 5));\r\n      const b = Number(\"0x\" + transparentcolor.substring(5, 7));\r\n\r\n      const img = this.image.domElement;\r\n      const canvas = phina.graphics.Canvas().setSize(img.width, img.height);\r\n      canvas.context.drawImage(img, 0, 0);\r\n      const imgData = canvas.context.getImageData(0, 0, img.width, img.height);\r\n      const data = imgData.data;\r\n      for (let i = 0; i < data.length; i += 4) {\r\n        if (data[i + 0] == r && data[i + 1] == g && data[i + 2] == b) {\r\n          data[i + 0] = 0;\r\n          data[i + 1] = 0;\r\n          data[i + 2] = 0;\r\n          data[i + 3] = 0;\r\n        }\r\n      }\r\n      canvas.context.putImageData(imgData, 0, 0);\r\n\r\n      this.image = canvas;\r\n    },\r\n\r\n    setup: function () {\r\n      this.tilewidth = this.json.tilewidth;\r\n      this.tileheight = this.json.tileheight;\r\n      this.imagewidth = this.json.imagewidth;\r\n      this.imageheight = this.json.imageheight;\r\n      this.cols = this.imagewidth / this.json.tilewidth;\r\n      this.rows = this.imageheight / this.json.tileheight;\r\n    },\r\n\r\n    calcUv: function (cell) {\r\n      const w = this.tilewidth / this.imagewidth;\r\n      const h = this.tileheight / this.imageheight;\r\n\r\n      const index = cell - this.firstgid;\r\n      const u0 = (index % this.cols) * w;\r\n      const u1 = u0 + w;\r\n      const v0 = Math.floor(index / this.cols) * h;\r\n      const v1 = v0 + h;\r\n\r\n      return [\r\n        u0, v1,\r\n        u1, v1,\r\n        u0, v0,\r\n        u1, v0,\r\n      ];\r\n    },\r\n  });\r\n\r\n  phina.asset.AssetLoader.register('tiled', function (key, src) {\r\n    var asset = TiledAsset();\r\n    return asset.load(src);\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  let TEXTURE = null;\r\n\r\n  phina.define(\"Middle1\", {\r\n    superClass: \"Enemy\",\r\n\r\n    init: function (params) {\r\n      this.superInit(({}).$extend({}, params));\r\n\r\n      if (TEXTURE == null) TEXTURE = ShipTextureGenerator.gen(3, 4444);\r\n\r\n      this.hp = 15;\r\n      this.r = 30;\r\n      this.toX = params.toX + CANVAS_WIDTH * 0.5;\r\n\r\n      this.fromJSON({\r\n        children: {\r\n          body: {\r\n            className: \"Sprite\",\r\n            arguments: [TEXTURE],\r\n          },\r\n        },\r\n      });\r\n\r\n      this.on(\"enter\", () => this.flare(\"attack\"));\r\n\r\n      this.on(\"killed\", () => {\r\n        this.flare(\"effect\", { type: \"middleExplosion\" });\r\n      });\r\n    },\r\n\r\n    start: function () {\r\n      this.tweener\r\n        .clear()\r\n        .to({\r\n          x: this.toX,\r\n        }, 2000, \"easeOutQuad\");\r\n\r\n      this.on(\"enterframe\", () => {\r\n        this.y += 1.2;\r\n\r\n        if (Fighter.instance.y < this.y) {\r\n          this.pauseAttack();\r\n        } else {\r\n          this.resumeAttack();\r\n        }\r\n\r\n        if (this.entered && !this.inWorld()) {\r\n          this.remove();\r\n        }\r\n      });\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  let TEXTURE = null;\r\n\r\n  phina.define(\"TankSmall\", {\r\n    superClass: \"Enemy\",\r\n\r\n    init: function (params) {\r\n      params = ({}).$extend({\r\n        speed: 0.75,\r\n      }, params);\r\n      this.superInit(params);\r\n\r\n      if (TEXTURE == null) TEXTURE = ShipTextureGenerator.gen(2, 3333);\r\n\r\n      this.hp = 8;\r\n      this.r = 20;\r\n      this.type = \"ground\";\r\n      this.vx = Math.cos(params.direction) * params.speed;\r\n      this.vy = Math.sin(params.direction) * params.speed;\r\n      this.rotation = 90 + params.direction.toDegree();\r\n\r\n      this.fromJSON({\r\n        children: {\r\n          body: {\r\n            className: \"Sprite\",\r\n            arguments: [TEXTURE],\r\n          },\r\n        },\r\n      });\r\n\r\n      this.on(\"enter\", () => this.flare(\"attack\"));\r\n      this.on(\"killed\", () => {\r\n        this.flare(\"effect\", { type: \"smallExplosion\" });\r\n      });\r\n    },\r\n\r\n    start: function () {\r\n      this.on(\"enterframe\", () => {\r\n        this.x += this.vx;\r\n        this.y += this.vy;\r\n\r\n        if (this.entered && !this.inWorld) {\r\n          this.remove();\r\n        }\r\n      });\r\n    },\r\n  });\r\n});\r\n","phina.namespace(() => {\r\n\r\n  let TEXTURE = null;\r\n\r\n  phina.define(\"Zako1\", {\r\n    superClass: \"Enemy\",\r\n\r\n    init: function (params) {\r\n      this.superInit(({}).$extend({}, params));\r\n\r\n      if (TEXTURE == null) TEXTURE = ShipTextureGenerator.gen(2, 1111);\r\n\r\n      this.hp = 3;\r\n      this.r = 20;\r\n\r\n      this.fromJSON({\r\n        children: {\r\n          body: {\r\n            className: \"AtlasSprite\",\r\n            arguments: {\r\n              atlas: \"enemies\",\r\n              frame: \"heri1_1.png\",\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      this.on(\"killed\", () => {\r\n        this.flare(\"effect\", { type: \"smallExplosion\" });\r\n      });\r\n    },\r\n\r\n    start: function () {\r\n      this.tweener\r\n        .clear()\r\n        .by({\r\n          y: 500\r\n        }, 1500, \"easeOutQuad\")\r\n        .call(() => this.flare(\"attack\"))\r\n        .wait(1000)\r\n        .by({\r\n          y: -500\r\n        }, 1500, \"easeInQuad\")\r\n        .call(() => this.remove());\r\n\r\n      this.odd = true;\r\n      this.on(\"enterframe\", (e) => {\r\n        this.body.scaleX = Fighter.instance.x < this.x ? 1 : -1;\r\n        if (this.odd) {\r\n          this.body.setFrame(\"heri1_1.png\");\r\n        } else {\r\n          this.body.setFrame(\"heri1_2.png\");\r\n        }\r\n        this.odd = !this.odd;\r\n      });\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  let TEXTURE = null;\r\n\r\n  phina.define(\"Zako2\", {\r\n    superClass: \"Enemy\",\r\n\r\n    init: function (params) {\r\n      this.superInit(({}).$extend({}, params));\r\n\r\n      if (TEXTURE == null) TEXTURE = ShipTextureGenerator.gen(2, 2222);\r\n\r\n      this.hp = 3;\r\n      this.r = 20;\r\n      this.a = Vector2(0, 0);\r\n      this.v = Vector2(0, 3);\r\n\r\n      this.fromJSON({\r\n        children: {\r\n          body: {\r\n            className: \"Sprite\",\r\n            arguments: [TEXTURE],\r\n          },\r\n        },\r\n      });\r\n\r\n      this.on(\"enter\", () => this.flare(\"attack\"));\r\n\r\n      this.on(\"killed\", () => {\r\n        this.flare(\"effect\", { type: \"smallExplosion\" });\r\n      });\r\n    },\r\n\r\n    start: function () {\r\n      this.on(\"enterframe\", () => {\r\n        this.a.set(Fighter.instance.x - this.x, Fighter.instance.y - this.y).normalize();\r\n        const angle = this.a.toDegree();\r\n        if (180 <= angle && angle < 270) {\r\n          this.a.fromDegree(180);\r\n        } else if (270 <= angle && angle < 360) {\r\n          this.a.fromDegree(0);\r\n        }\r\n        this.v.add(this.a.mul(0.3)).normalize().mul(7);\r\n\r\n        this.position.add(this.v);\r\n        this.rotation = 90 + angle;\r\n\r\n        if (Fighter.instance.y < this.y) {\r\n          this.pauseAttack();\r\n        } else {\r\n          this.resumeAttack();\r\n        }\r\n\r\n        if (this.entered && !this.inWorld()) {\r\n          this.remove();\r\n        }\r\n      });\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"GLApp\", {\r\n    superClass: \"phina.display.DomApp\",\r\n\r\n    gl: null,\r\n\r\n    init: function (params) {\r\n      params = ({}).$extend(GLApp.defaults, params);\r\n      if (!params.query && !params.domElement) {\r\n        params.domElement = document.createElement('canvas');\r\n        if (params.append) {\r\n          document.body.appendChild(params.domElement);\r\n        }\r\n      }\r\n\r\n      this.superInit(params);\r\n\r\n      this.domElement.width = params.width;\r\n      this.domElement.height = params.height;\r\n\r\n      if (params.fit) {\r\n        FitScreen.fit(this.domElement);\r\n      }\r\n\r\n      this.gl = this.domElement.getContext(\"webgl\");\r\n      const ext = this.gl.getExtension(\"OES_texture_float\");\r\n      this.renderer = GLAppRenderer(this.gl);\r\n    },\r\n\r\n    _draw: function () {\r\n      const gl = this.gl;\r\n\r\n      this.renderer.render(this.currentScene);\r\n      gl.flush();\r\n    },\r\n\r\n    _static: {\r\n      defaults: {\r\n        width: 640,\r\n        height: 960,\r\n        fit: true,\r\n        append: true,\r\n        fps: 60,\r\n      },\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"GLAppRenderer\", {\r\n    superClass: \"phina.util.EventDispatcher\",\r\n\r\n    gl: null,\r\n    lighting: null,\r\n\r\n    init: function (gl, w, h) {\r\n      this.superInit();\r\n\r\n      gl.clearColor(0, 0, 0, 1);\r\n      gl.clearDepth(1.0);\r\n\r\n      this.gl = gl;\r\n      this.spriteArrays = {};\r\n      this.lighting = Lighting();\r\n    },\r\n\r\n    addSpriteArray: function (name, atlas, max = 1000) {\r\n      const array = GLSpriteArray(this.gl, atlas, max);\r\n      this.spriteArrays[name] = array;\r\n      return array;\r\n    },\r\n\r\n    getSpriteArray: function (name) {\r\n      return this.spriteArrays[name];\r\n    },\r\n\r\n    render: function (scene) {\r\n      const gl = this.gl;\r\n\r\n      this.flare(\"prerender\", { gl });\r\n\r\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n      for (let name in this.spriteArrays) {\r\n        const array = this.spriteArrays[name];\r\n        array.draw(gl, this.lighting);\r\n      }\r\n      this.renderChildren(scene);\r\n\r\n      this.flare(\"postrender\", { gl, scene });\r\n    },\r\n\r\n    renderChildren: function (obj) {\r\n      if (obj.children.length > 0) {\r\n        let tempChildren = obj.children.slice();\r\n        for (let i = 0, len = tempChildren.length; i < len; ++i) {\r\n          this.renderObject(tempChildren[i]);\r\n        }\r\n      }\r\n    },\r\n\r\n    renderObject: function (obj) {\r\n      if (obj.visible === false) return;\r\n\r\n      obj._calcWorldMatrix && obj._calcWorldMatrix();\r\n      obj._calcWorldAlpha && obj._calcWorldAlpha();\r\n\r\n      obj.draw && obj.draw(this.gl, this.lighting);\r\n\r\n      let tempChildren = obj.children.slice();\r\n      for (let i = 0, len = tempChildren.length; i < len; ++i) {\r\n        this.renderObject(tempChildren[i]);\r\n      }\r\n    },\r\n\r\n    addNext: function (pass) {\r\n      pass.setRenderer(this);\r\n      return pass;\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"GLLoadingScene\", {\r\n    superClass: \"GLScene\",\r\n\r\n    init: function (params) {\r\n      this.superInit(params);\r\n\r\n      const loader = phina.asset.AssetLoader();\r\n      loader.on(\"load\", () => {\r\n        this.app.popScene();\r\n      });\r\n      loader.load(params.assets);\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"GLScene\", {\r\n    superClass: \"phina.app.Scene\",\r\n\r\n    init: function (params) {\r\n      this.superInit();\r\n      params = ({}).$extend(GLScene.defaults, params);\r\n    },\r\n\r\n    _static: {\r\n      defaults: {\r\n      },\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n  /**\r\n   * インスタンシングを使わないやつ\r\n   */\r\n  phina.define(\"GLSingleSprite\", {\r\n\r\n    superClass: \"DisplayElement\",\r\n\r\n    z: 0,\r\n\r\n    init: function (options) {\r\n      options = ({}).$extend(GLSingleSprite.defaults, options);\r\n      this.superInit(options);\r\n\r\n      let image = null;\r\n      if (typeof (options.image) == \"string\") {\r\n        image = AssetManager.get(\"image\", options.image);\r\n      } else {\r\n        image = options.image;\r\n      }\r\n\r\n      this.width = image.domElement.width;\r\n      this.height = image.domElement.height;\r\n\r\n      this.depthEnabled = options.depthEnabled;\r\n      this.blendMode = options.blendMode;\r\n      this.alphaEnabled = options.alphaEnabled;\r\n      this.brightness = options.brightness;\r\n\r\n      const gl = options.gl;\r\n      if (typeof (options.image) == \"string\") {\r\n        this.texture = TextureAsset.get(gl, options.image);\r\n        this.normalMap = TextureAsset.get(gl, options.image + \"_n\");\r\n        this.emissionMap = TextureAsset.get(gl, options.image + \"_e\");\r\n      } else {\r\n        this.texture = options.image;\r\n        this.normalMap = options.normalMap;\r\n        this.emissionMap = options.emissionMap;\r\n      }\r\n      if (this.normalMap == null) {\r\n        this.normalMap = TextureAsset.get(gl, GLSingleSprite.defaults.normalMap);\r\n      }\r\n      if (this.emissionMap == null) {\r\n        this.emissionMap = TextureAsset.get(gl, GLSingleSprite.defaults.emissionMap);\r\n      }\r\n\r\n      if (GLSingleSprite.drawable == null) {\r\n        const program = phigl.Program(gl)\r\n          .attach(\"glsinglesprite.vs\")\r\n          .attach(\"glsinglesprite.fs\")\r\n          .link();\r\n        GLSingleSprite.drawable = phigl.Drawable(gl)\r\n          .setProgram(program)\r\n          .setIndexValues([0, 1, 2, 1, 3, 2])\r\n          .declareAttributes(\"position\", \"uv\")\r\n          .setAttributeDataArray([{\r\n            unitSize: 2,\r\n            data: [\r\n              0, 1,\r\n              1, 1,\r\n              0, 0,\r\n              1, 0,\r\n            ]\r\n          }, {\r\n            unitSize: 2,\r\n            data: [\r\n              0, 1,\r\n              1, 1,\r\n              0, 0,\r\n              1, 0,\r\n            ],\r\n          },])\r\n          .createVao()\r\n          .declareUniforms(\r\n            \"instanceActive\",\r\n            \"instancePosition\",\r\n            \"instanceSize\",\r\n            \"instanceAlphaEnabled\",\r\n            \"instanceAlpha\",\r\n            \"instanceBrightness\",\r\n            \"cameraMatrix0\",\r\n            \"cameraMatrix1\",\r\n            \"cameraMatrix2\",\r\n            \"screenSize\",\r\n            \"texture\",\r\n            \"texture_n\",\r\n            \"texture_e\",\r\n            \"ambientColor\",\r\n            \"lightColor\",\r\n            \"lightPower\",\r\n            \"lightPosition\",\r\n          );\r\n      }\r\n    },\r\n\r\n    setZ: function (v) {\r\n      this.z = v;\r\n      return this;\r\n    },\r\n\r\n    draw: function (gl, lighting) {\r\n      const drawable = GLSingleSprite.drawable;\r\n\r\n      if (this.blendMode === \"source-over\") {\r\n        gl.enable(gl.DEPTH_TEST);\r\n        gl.depthFunc(gl.LEQUAL);\r\n      } else {\r\n        gl.disable(gl.DEPTH_TEST);\r\n      }\r\n\r\n      if (this.blendMode === \"source-over\") {\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n      } else {\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.ONE, gl.ONE);\r\n      }\r\n\r\n      const m = this._worldMatrix;\r\n      const uni = drawable.uniforms;\r\n      uni[\"instanceActive\"].setValue((this.parent && this.visible) ? 1 : 0);\r\n      if (this.parent && this.visible) {\r\n        uni[\"instancePosition\"].setValue([-this.width * this.originX, -this.height * this.originY, this.z]);\r\n        uni[\"instanceSize\"].setValue([this.width, this.height]);\r\n        uni[\"cameraMatrix0\"].setValue([m.m00, m.m10]);\r\n        uni[\"cameraMatrix1\"].setValue([m.m01, m.m11]);\r\n        uni[\"cameraMatrix2\"].setValue([m.m02, m.m12]);\r\n        uni[\"screenSize\"].setValue([CANVAS_WIDTH, CANVAS_HEIGHT]);\r\n        uni[\"texture\"].setValue(0).setTexture(this.texture);\r\n        uni[\"texture_n\"].setValue(1).setTexture(this.normalMap);\r\n        uni[\"texture_e\"].setValue(2).setTexture(this.emissionMap);\r\n        uni[\"alphaEnabled\"].setValue(this.alphaEnabled ? 1 : 0);\r\n        uni[\"alpha\"].setValue(this._worldAlpha);\r\n        uni[\"brightness\"].setValue(this.brightness);\r\n        lighting.set(drawable);\r\n      }\r\n\r\n      drawable.draw();\r\n    },\r\n\r\n    _static: {\r\n      defaults: {\r\n        depthEnabled: true,\r\n        blendMode: \"source-over\",\r\n        alphaEnabled: false,\r\n        brightness: 1.0,\r\n        normalMap: \"no_normal\",\r\n        emissionMap: \"black\",\r\n      },\r\n      drawable: null,\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"GLSpriteArray\", {\r\n\r\n    init: function (gl, atlas, max, options) {\r\n      options = ({}).$extend(GLSpriteArray.defaults, options);\r\n\r\n      this.gl = gl;\r\n      this.indexPool = Array.range(0, max);\r\n      this.instances = [];\r\n\r\n      this.atlas = phina.asset.AssetManager.get(\"atlas\", atlas);\r\n\r\n      this.image = this.atlas.images[Object.keys(this.atlas.images)[0]];\r\n      this.texture = phigl.Texture(gl, this.image);\r\n      this.max = max;\r\n\r\n      this.depthEnabled = options.depthEnabled;\r\n      this.blendMode = options.blendMode;\r\n\r\n      if (GLSpriteArray.drawable == null) {\r\n        const ext = phigl.Extensions.getInstancedArrays(gl);\r\n\r\n        const program = phigl.Program(gl)\r\n          .attach(\"glsprite.vs\")\r\n          .attach(\"glsprite.fs\")\r\n          .link();\r\n\r\n        GLSpriteArray.drawable = phigl.InstancedDrawable(gl, ext)\r\n          .setProgram(program)\r\n          .setIndexValues([0, 1, 2, 1, 3, 2])\r\n          .declareAttributes(\"posuv\")\r\n          .setAttributeDataArray([{\r\n            // position, uv\r\n            unitSize: 2,\r\n            data: [\r\n              0, 1,\r\n              1, 1,\r\n              0, 0,\r\n              1, 0,\r\n            ],\r\n          },])\r\n          .createVao()\r\n          .declareInstanceAttributes(\r\n            \"instanceUvMatrix0\",\r\n            \"instanceUvMatrix1\",\r\n            \"instanceUvMatrixN0\",\r\n            \"instanceUvMatrixN1\",\r\n            \"instanceUvMatrixE0\",\r\n            \"instanceUvMatrixE1\",\r\n            \"instancePosition\",\r\n            \"instanceSize\",\r\n            \"cameraMatrix0\",\r\n            \"cameraMatrix1\",\r\n            \"color\",\r\n          )\r\n          .declareUniforms(\r\n            \"screenSize\",\r\n            \"texture\",\r\n            \"alphaEnabled\",\r\n            \"ambientColor\",\r\n            \"lightColor\",\r\n            \"lightPower\",\r\n            \"lightPosition\",\r\n          );\r\n      }\r\n\r\n      this.array = [];\r\n      for (let i = 0; i < max; i++) {\r\n        this.array.push(...[\r\n          // uv matrix\r\n          1, 0,\r\n          0, 1,\r\n          0, 0,\r\n          // uv matrix normal\r\n          1, 0,\r\n          0, 1,\r\n          0, 0,\r\n          // // uv matrix emission\r\n          1, 0,\r\n          0, 1,\r\n          0, 0,\r\n          // sprite position\r\n          0, 0, 0,\r\n          // sprite size ( + active + alpha)\r\n          0, 0, 0, 1,\r\n          // camera matrix\r\n          1, 0,\r\n          0, 1,\r\n          0, 0,\r\n          // color\r\n          1, 1, 1,\r\n        ]);\r\n      }\r\n    },\r\n\r\n    draw: function (gl, lighting) {\r\n      const drawable = GLSpriteArray.drawable;\r\n\r\n      if (this.blendMode === \"source-over\") {\r\n        gl.enable(gl.DEPTH_TEST);\r\n        gl.depthFunc(gl.LEQUAL);\r\n      } else {\r\n        gl.disable(gl.DEPTH_TEST);\r\n      }\r\n\r\n      if (this.blendMode === \"source-over\") {\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n      } else {\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.ONE, gl.ONE);\r\n      }\r\n\r\n      for (let i = 0, len = this.instances.length; i < len; i++) {\r\n        this.instances[i].updateAttributes(this.array);\r\n      }\r\n\r\n      const uni = drawable.uniforms;\r\n      uni[\"screenSize\"].setValue([CANVAS_WIDTH, CANVAS_HEIGHT]);\r\n      uni[\"texture\"].setValue(0).setTexture(this.texture);\r\n      uni[\"alphaEnabled\"].setValue(this.blendMode == \"source-over\" ? 0 : 1);\r\n      lighting.set(drawable);\r\n\r\n      drawable.setInstanceAttributeData(this.array);\r\n      drawable.draw(this.max);\r\n    },\r\n\r\n    dispose: function () {\r\n\r\n    },\r\n\r\n    _static: {\r\n      defaults: {\r\n        depthEnabled: true,\r\n        blendMode: \"source-over\",\r\n      },\r\n      drawable: null,\r\n    },\r\n  });\r\n\r\n  phina.define(\"GLSprite\", {\r\n    superClass: \"phina.display.DisplayElement\",\r\n\r\n    init: function (params) {\r\n      params = ({}).$extend(GLSprite.defaults, params);\r\n      this.superInit(params);\r\n\r\n      this.spriteArray = params.spriteArray;\r\n      this.alphaEnabled = params.alphaEnabled;\r\n      this.brightness = params.brightness;\r\n      if (this.alphaEnabled) {\r\n        this.instanceIndex = this.spriteArray.indexPool.pop();\r\n      } else {\r\n        this.instanceIndex = this.spriteArray.indexPool.shift();\r\n      }\r\n      this.uvMatrix = Matrix33();\r\n      this.uvMatrixN = Matrix33();\r\n      this.uvMatrixE = Matrix33();\r\n\r\n      this.setImage(params.image);\r\n      this.setNormalMap(params.normalMap);\r\n      this.setEmissionMap(params.emissionMap);\r\n\r\n      this.spriteArray.instances.push(this);\r\n\r\n      this.z = 0;\r\n      this.r = 1;\r\n      this.g = 1;\r\n      this.b = 1;\r\n    },\r\n\r\n    setImage: function (image) {\r\n      const frame = this.spriteArray.atlas.getFrameByName(image);\r\n      const imgW = this.spriteArray.image.domElement.width;\r\n      const imgH = this.spriteArray.image.domElement.height;\r\n\r\n      const f = frame.frame;\r\n      const texX = f.x;\r\n      const texY = f.y;\r\n      const texW = f.w;\r\n      const texH = f.h;\r\n\r\n      const uvm = this.uvMatrix;\r\n      uvm.m00 = texW / imgW;\r\n      uvm.m01 = 0;\r\n      uvm.m10 = 0;\r\n      uvm.m11 = texH / imgH;\r\n      uvm.m02 = texX / imgW;\r\n      uvm.m12 = texY / imgH;\r\n\r\n      this.width = f.w;\r\n      this.height = f.h;\r\n    },\r\n\r\n    setNormalMap: function (image) {\r\n      const frame = this.spriteArray.atlas.getFrameByName(image);\r\n      const imgW = this.spriteArray.image.domElement.width;\r\n      const imgH = this.spriteArray.image.domElement.height;\r\n\r\n      const f = frame.frame;\r\n      const texX = f.x;\r\n      const texY = f.y;\r\n      const texW = f.w;\r\n      const texH = f.h;\r\n\r\n      const uvm = this.uvMatrixN;\r\n      uvm.m00 = texW / imgW;\r\n      uvm.m01 = 0;\r\n      uvm.m10 = 0;\r\n      uvm.m11 = texH / imgH;\r\n      uvm.m02 = texX / imgW;\r\n      uvm.m12 = texY / imgH;\r\n    },\r\n\r\n    setEmissionMap: function (image) {\r\n      const frame = this.spriteArray.atlas.getFrameByName(image);\r\n      const imgW = this.spriteArray.image.domElement.width;\r\n      const imgH = this.spriteArray.image.domElement.height;\r\n\r\n      const f = frame.frame;\r\n      const texX = f.x;\r\n      const texY = f.y;\r\n      const texW = f.w;\r\n      const texH = f.h;\r\n\r\n      const uvm = this.uvMatrixE;\r\n      uvm.m00 = texW / imgW;\r\n      uvm.m01 = 0;\r\n      uvm.m10 = 0;\r\n      uvm.m11 = texH / imgH;\r\n      uvm.m02 = texX / imgW;\r\n      uvm.m12 = texY / imgH;\r\n    },\r\n\r\n    setZ: function (v) {\r\n      this.z = v;\r\n      return this;\r\n    },\r\n\r\n    setAlpha: function (v) {\r\n      this.alpha = v;\r\n      return this;\r\n    },\r\n\r\n    setBrightness: function (v) {\r\n      this.brightness = v;\r\n      return this;\r\n    },\r\n\r\n    dispose: function () {\r\n      if (this.alphaEnabled) {\r\n        this.spriteArray.indexPool.push(this.instanceIndex);\r\n      } else {\r\n        this.spriteArray.indexPool.unshift(this.instanceIndex);\r\n      }\r\n      this.spriteArray.instances.erase(this);\r\n      this.instanceIndex = undefined;\r\n    },\r\n\r\n    updateAttributes: function (array) {\r\n      if (this.instanceIndex === undefined) return;\r\n\r\n      const idx = this.instanceIndex;\r\n      const uvm = this.uvMatrix;\r\n      const uvmN = this.uvMatrixN;\r\n      const uvmE = this.uvMatrixE;\r\n      const m = this._worldMatrix;\r\n\r\n      const size = 34;\r\n\r\n      // active\r\n      array[idx * size + 23] = (this.parent && this.visible) ? 1 : 0;\r\n      if (this.parent && this.visible) {\r\n        // uv matrix\r\n        array[idx * size + 0] = uvm.m00;\r\n        array[idx * size + 1] = uvm.m10;\r\n        array[idx * size + 2] = uvm.m01;\r\n        array[idx * size + 3] = uvm.m11;\r\n        array[idx * size + 4] = uvm.m02;\r\n        array[idx * size + 5] = uvm.m12;\r\n        // uv matrix normal\r\n        array[idx * size + 6] = uvmN.m00;\r\n        array[idx * size + 7] = uvmN.m10;\r\n        array[idx * size + 8] = uvmN.m01;\r\n        array[idx * size + 9] = uvmN.m11;\r\n        array[idx * size + 10] = uvmN.m02;\r\n        array[idx * size + 11] = uvmN.m12;\r\n        // // uv matrix emission\r\n        array[idx * size + 12] = uvmE.m00;\r\n        array[idx * size + 13] = uvmE.m10;\r\n        array[idx * size + 14] = uvmE.m01;\r\n        array[idx * size + 15] = uvmE.m11;\r\n        array[idx * size + 16] = uvmE.m02;\r\n        array[idx * size + 17] = uvmE.m12;\r\n        // sprite position\r\n        array[idx * size + 18] = -this.width * this.originX;\r\n        array[idx * size + 19] = -this.height * this.originY;\r\n        array[idx * size + 20] = this.z;\r\n        // sprite size\r\n        array[idx * size + 21] = this.width;\r\n        array[idx * size + 22] = this.height;\r\n        // alpha\r\n        array[idx * size + 24] = this._worldAlpha;\r\n        // camera matrix\r\n        array[idx * size + 25] = m.m00;\r\n        array[idx * size + 26] = m.m10;\r\n        array[idx * size + 27] = m.m01;\r\n        array[idx * size + 28] = m.m11;\r\n        array[idx * size + 29] = m.m02;\r\n        array[idx * size + 30] = m.m12;\r\n        // color\r\n        array[idx * size + 31] = this.r;\r\n        array[idx * size + 32] = this.g;\r\n        array[idx * size + 33] = this.b;\r\n      }\r\n    },\r\n\r\n    _static: {\r\n      defaults: {\r\n        alphaEnabled: false,\r\n        normalMap: \"no_normal.png\",\r\n        emissionMap: \"black.png\"\r\n      },\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"GLTiledMap\", {\r\n    superClass: \"DisplayElement\",\r\n\r\n    z: 0,\r\n\r\n    init: function (options) {\r\n      options = ({}).$extend(GLTiledMap.defaults, options);\r\n      this.superInit(options);\r\n\r\n      this.blendMode = options.blendMode;\r\n\r\n      const gl = options.gl;\r\n\r\n      if (typeof (options.tiledAsset) == \"string\") {\r\n        this.tiledAsset = AssetManager.get(\"tiled\", options.tiledAsset);\r\n      } else {\r\n        this.tiledAsset = options.tiledAsset;\r\n      }\r\n\r\n      const tilesets = this.tiledAsset.tilesets;\r\n      this.textures = tilesets.map(ts => TextureAsset.get(gl, ts.image));\r\n      this.normalMaps = tilesets.map(ts => TextureAsset.get(gl, ts.normalImage));\r\n      this.emissionMaps = tilesets.map(ts => TextureAsset.get(gl, ts.emissionImage));\r\n\r\n      const cols = this.tiledAsset.json.width;\r\n      const rows = this.tiledAsset.json.height;\r\n      this.tilewidth = this.tiledAsset.json.tilewidth;\r\n      this.tileheight = this.tiledAsset.json.tileheight;\r\n\r\n      this.width = cols * this.tilewidth;\r\n      this.height = rows * this.tileheight;\r\n      this.originX = 0;\r\n      this.originY = 0;\r\n\r\n      const indices = [];\r\n      const positions = [];\r\n      const textureIndices = [];\r\n      const uvs = [];\r\n\r\n      let offset = 0;\r\n      this.tiledAsset.json.layers.filter(l => l.type == \"tilelayer\").reverse().forEach((layer, layerIndex) => {\r\n        const data = layer.data;\r\n\r\n        tilesets.push({ firstgid: Number.MAX_VALUE });\r\n        for (let y = 0; y < rows; y++) {\r\n          for (let x = 0; x < cols; x++) {\r\n            const idx = y * cols + x;\r\n            const cell = data[idx];\r\n\r\n            if (cell == 0) continue;\r\n\r\n            const textureIndex = tilesets.indexOf(tilesets.find(ts => cell < ts.firstgid)) - 1;\r\n            const uv = tilesets[textureIndex].calcUv(cell);\r\n\r\n            indices.push(\r\n              offset + 0,\r\n              offset + 1,\r\n              offset + 2,\r\n              offset + 1,\r\n              offset + 3,\r\n              offset + 2,\r\n            );\r\n            positions.push(\r\n              x + 0, y + 1, layerIndex * -0.01,\r\n              x + 1, y + 1, layerIndex * -0.01,\r\n              x + 0, y + 0, layerIndex * -0.01,\r\n              x + 1, y + 0, layerIndex * -0.01,\r\n            );\r\n            offset += 4;\r\n            textureIndices.push(\r\n              textureIndex,\r\n              textureIndex,\r\n              textureIndex,\r\n              textureIndex,\r\n            );\r\n            uvs.push(...uv);\r\n          }\r\n        }\r\n        tilesets.pop();\r\n      });\r\n\r\n      if (GLTiledMap.program == null) {\r\n        GLTiledMap.program = phigl.Program(gl)\r\n          .attach(\"gltiledmap.vs\")\r\n          .attach(\"gltiledmap.fs\")\r\n          .link();\r\n      }\r\n      this.drawable = phigl.Drawable(gl)\r\n        .setProgram(GLTiledMap.program)\r\n        .setIndexValues(indices)\r\n        .declareAttributes(\"position\", \"uv\", \"textureIndex\")\r\n        .setAttributeDataArray([{\r\n          unitSize: 3,\r\n          data: positions,\r\n        }, {\r\n          unitSize: 2,\r\n          data: uvs,\r\n        }, {\r\n          unitSize: 1,\r\n          data: textureIndices,\r\n        }])\r\n        .createVao()\r\n        .declareUniforms(\r\n          \"instanceActive\",\r\n          \"instancePosition\",\r\n          \"instanceSize\",\r\n          \"instanceAlpha\",\r\n          \"cameraMatrix0\",\r\n          \"cameraMatrix1\",\r\n          \"cameraMatrix2\",\r\n          \"screenSize\",\r\n          \"texture\",\r\n          \"texture_n\",\r\n          \"texture_e\",\r\n          \"ambientColor\",\r\n          \"lightColor\",\r\n          \"lightPower\",\r\n          \"lightPosition\",\r\n        );\r\n    },\r\n\r\n    setZ: function (v) {\r\n      this.z = v;\r\n      return this;\r\n    },\r\n\r\n    draw: function (gl, lighting) {\r\n      gl.enable(gl.DEPTH_TEST);\r\n      gl.depthFunc(gl.LEQUAL);\r\n      gl.enable(gl.BLEND);\r\n      gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n      const m = this._worldMatrix;\r\n\r\n      const drawable = this.drawable;\r\n      const uni = drawable.uniforms;\r\n      uni[\"instanceActive\"].setValue((this.parent && this.visible) ? 1 : 0);\r\n      if (this.parent && this.visible) {\r\n        uni[\"instancePosition\"].setValue([-this.width * this.originX, -this.height * this.originY, this.z]);\r\n        uni[\"instanceSize\"].setValue([this.tilewidth, this.tileheight]);\r\n        uni[\"instanceAlpha\"].setValue(this._worldAlpha);\r\n        uni[\"cameraMatrix0\"].setValue([m.m00, m.m10]);\r\n        uni[\"cameraMatrix1\"].setValue([m.m01, m.m11]);\r\n        uni[\"cameraMatrix2\"].setValue([m.m02, m.m12]);\r\n        uni[\"screenSize\"].setValue([CANVAS_WIDTH, CANVAS_HEIGHT]);\r\n        for (let i = 0, len = this.textures.length; i < len; i++) {\r\n          uni[`texture[${i}]`].setValue(4 * 0 + i).setTexture(this.textures[i]);\r\n        }\r\n        for (let i = 0, len = this.normalMaps.length; i < len; i++) {\r\n          uni[`texture_n[${i}]`].setValue(4 * 1 + i).setTexture(this.normalMaps[i]);\r\n        }\r\n        for (let i = 0, len = this.emissionMaps.length; i < len; i++) {\r\n          uni[`texture_e[${i}]`].setValue(4 * 2 + i).setTexture(this.emissionMaps[i]);\r\n        }\r\n        lighting.set(drawable);\r\n      }\r\n\r\n      drawable.draw();\r\n    },\r\n\r\n    _static: {\r\n      defaults: {\r\n        layer: 0,\r\n      },\r\n      program: null,\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  const POINT_LIGHT_COUNT = 10;\r\n\r\n  phina.define(\"Lighting\", {\r\n\r\n    r: 0,\r\n    g: 0,\r\n    b: 0,\r\n    pointLights: null,\r\n\r\n    init: function () {\r\n      this.pointLights = Array.range(0, POINT_LIGHT_COUNT).map(index => {\r\n        const pl = PointLight({ index });\r\n        return pl;\r\n      });\r\n    },\r\n\r\n    setColor: function (r, g, b) {\r\n      this.r = r;\r\n      this.g = g;\r\n      this.b = b;\r\n      return this;\r\n    },\r\n\r\n    set: function (drawable) {\r\n      drawable.uniforms[\"ambientColor\"].setValue([this.r / 255, this.g / 255, this.b / 255, 1]);\r\n\r\n      const ps = this.pointLights;\r\n      for (let i = 0, len = ps.length; i < len; i++) {\r\n        ps[i].set(drawable);\r\n      }\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"PointLight\", {\r\n    superClass: \"DisplayElement\",\r\n\r\n    index: 0,\r\n    z: 0,\r\n\r\n    r: 0,\r\n    g: 0,\r\n    b: 0,\r\n    power: 0,\r\n\r\n    init: function (options) {\r\n      options = ({}).$extend(PointLight.defaults, options);\r\n      this.superInit(options);\r\n      this.index = options.index;\r\n      this.z = options.z;\r\n    },\r\n\r\n    setZ: function (value) {\r\n      this.z = value;\r\n      return this;\r\n    },\r\n\r\n    setPower: function (v) {\r\n      this.power = v;\r\n      return this;\r\n    },\r\n\r\n    setColor: function (r, g, b) {\r\n      this.r = r;\r\n      this.g = g;\r\n      this.b = b;\r\n      return this;\r\n    },\r\n\r\n    set: function (drawable) {\r\n      const uni = drawable.uniforms;\r\n      const i = this.index;\r\n      if (this.parent && this.visible) {\r\n        uni[`lightColor[${i}]`].setValue([this.r / 255, this.g / 255, this.b / 255, 1]);\r\n        uni[`lightPower[${i}]`].setValue(this.power);\r\n        uni[`lightPosition[${i}]`].setValue([this.x, this.y, this.z]);\r\n      } else {\r\n        uni[`lightColor[${i}]`].setValue([0, 0, 0, 1]);\r\n        uni[`lightPower[${i}]`].setValue(0);\r\n        uni[`lightPosition[${i}]`].setValue([0, 0, 0]);\r\n      }\r\n    },\r\n\r\n    _static: {\r\n      defaults: {\r\n        z: 30,\r\n        power: 0,\r\n      },\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"TextureAsset\", {\r\n    _static: {\r\n      get: function (gl, name) {\r\n        const AssetManager = phina.asset.AssetManager;\r\n\r\n        if (typeof(name) !== \"string\") {\r\n          if (name._id) {\r\n            name = name._id;\r\n          } else {\r\n            name._id = gen();\r\n            AssetManager.set(\"image\", name._id, name);\r\n          }\r\n\r\n          name = name._id;\r\n        }\r\n\r\n        if (AssetManager.get(\"texture\", name) == null) {\r\n          const img = AssetManager.get(\"image\", name);\r\n          if (img == null) {\r\n            console.log(\"そんな画像ないです \" + name);\r\n            return null;\r\n          }\r\n          AssetManager.set(\"texture\", name, phigl.Texture(gl, img));\r\n        }\r\n\r\n        return AssetManager.get(\"texture\", name);\r\n      },\r\n    },\r\n  });\r\n\r\n  const gen = () =>  Date.now() + \"-\" + phina.util.Random.randint(0, 1000) + \"-\" + phina.util.Random.randint(0, 1000) + \"-\" + phina.util.Random.randint(0, 1000);\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"megaparticle.Emitter\", {\r\n    superClass: \"phina.app.Object2D\",\r\n\r\n    init: function (json, particleSystem) {\r\n      this.superInit();\r\n      this.json = json;\r\n      this.particleSystem = particleSystem;\r\n\r\n      this.indices = particleSystem.getIndices(json.maxParticles);\r\n    },\r\n\r\n    start: function (x, y) {\r\n      this.particleSystem.start(x, y, this.indices, this.json);\r\n    },\r\n\r\n    stop: function () {\r\n      this.particleSystem.reserveStop(this.indices);\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  const texSize = 1024;\r\n  const posX = x => (-texSize / 2 + (x * 4 + 2)) / (texSize / 2);\r\n  const posY = y => (texSize / 2 - (y * 4 + 2)) / (texSize / 2);\r\n  const uvX = x => x * 4 / texSize;\r\n  const uvY = y => 1 - y * 4 / texSize;\r\n\r\n  phina.define(\"megaparticle.ParticleSystem\", {\r\n    _static: {\r\n      texSize: texSize,\r\n    },\r\n\r\n    init: function ({ gl }) {\r\n      if (gl.getExtension(\"OES_texture_float\") == null) throw \"Float Textureに対応してないらしいよ\";\r\n      if (gl.getExtension(\"WEBGL_color_buffer_float\") == null) throw \"Float Textureに対応してないらしいよ\";\r\n\r\n      this.gl = gl;\r\n      this.time = 0;\r\n\r\n      this.framebufferA = phigl.FloatTexFramebuffer(gl, texSize, texSize);\r\n      this.framebufferB = phigl.FloatTexFramebuffer(gl, texSize, texSize);\r\n      this.textures = {};\r\n      this.textureNames = [];\r\n      this.reservedStopIndices = [];\r\n      this.velocityUpdateTime = 0;\r\n\r\n      this._setupStarter();\r\n      this._setupStoper();\r\n      this._setupUpdater();\r\n      this._setupDrawer();\r\n\r\n      this._setupCopy();\r\n      this._setupSet();\r\n\r\n      this.indices = Array.range(0, (texSize / 4) * (texSize / 4)).map(index => {\r\n        return { index, releaseAt: -1 };\r\n      });\r\n\r\n      this.freeIndex = 0;\r\n    },\r\n\r\n    delete: function () {\r\n      this.framebufferA.delete();\r\n      this.framebufferB.delete();\r\n      this.drawableStart.delete();\r\n      this.drawableStop.delete();\r\n      this.drawableUpdate.delete();\r\n      this.drawableDraw.delete();\r\n      this.drawableSet.delete();\r\n      this.drawableCopy.delete();\r\n      this.textureNames.forEach(name => this.textures[name].delete());\r\n    },\r\n\r\n    swapBuffer: function () {\r\n      [this.framebufferA, this.framebufferB] = [this.framebufferB, this.framebufferA];\r\n    },\r\n\r\n    getIndices: function (count) {\r\n      const max = (texSize / 4) * (texSize / 4);\r\n      const start = this.freeIndex;\r\n      this.freeIndex += count;\r\n      if (start + count < max) {\r\n        return Array.range(start, start + count);\r\n      } else {\r\n        throw `パーティクルたりないよ (要求：${start + count}、最大：${max})`;\r\n      }\r\n    },\r\n\r\n    createEmitter: function (json) {\r\n      return megaparticle.Emitter(json, this);\r\n    },\r\n\r\n    registerTexture: function (name, image) {\r\n      if (this.textures[name] == null) {\r\n        this.textures[name] = phigl.Texture(this.gl, image, (gl) => {\r\n          // gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        });\r\n        this.textureNames.push(name);\r\n      }\r\n    },\r\n\r\n    _setupStarter: function () {\r\n      const gl = this.gl;\r\n\r\n      const program = phigl.Program(gl)\r\n        .attach(\"mega_start.vs\")\r\n        .attach(\"mega_start.fs\")\r\n        .link();\r\n      this.drawableStart = phigl.Drawable(gl)\r\n        .setProgram(program)\r\n        .setIndexValues([])\r\n        .declareAttributes(\"index\")\r\n        .setAttributeDataArray([{\r\n          unitSize: 1,\r\n          data: Array.range(0, (texSize / 4) * (texSize / 4)),\r\n        }])\r\n        .createVao()\r\n        .declareUniforms(\r\n          \"texSize\",\r\n          \"time\",\r\n          \"data0\",\r\n          \"data1\",\r\n          \"data2\",\r\n          \"randomFactor\",\r\n        )\r\n        .setDrawMode(gl.POINTS);\r\n    },\r\n\r\n    start: function (x, y, indices, params) {\r\n      const gl = this.gl;\r\n      const emitInterval = params.particleLifespan / params.maxParticles;\r\n\r\n      this.framebufferA.bind(gl);\r\n      gl.viewport(0, 0, texSize, texSize);\r\n      gl.disable(gl.CULL_FACE);\r\n      gl.disable(gl.BLEND);\r\n      gl.disable(gl.DEPTH_TEST);\r\n\r\n      const drawable = this.drawableStart;\r\n      drawable.setIndexValues(indices);\r\n      drawable.uniforms[\"texSize\"].setValue(texSize);\r\n      drawable.uniforms[\"time\"].setValue(this.time);\r\n      drawable.uniforms[\"randomFactor0\"].setValue([phina.util.Random.random(), phina.util.Random.random()]);\r\n      drawable.uniforms[\"randomFactor1\"].setValue([phina.util.Random.random(), phina.util.Random.random()]);\r\n      drawable.uniforms[\"data0\"].setValue([\r\n        // [0]\r\n        x,\r\n        y,\r\n        params.sourcePositionVariancex,\r\n        params.sourcePositionVariancey,\r\n        // [1]\r\n        params.startParticleSize,\r\n        params.startParticleSizeVariance,\r\n        params.finishParticleSize,\r\n        params.finishParticleSizeVariance,\r\n        // [2]\r\n        params.rotationStart,\r\n        params.rotationStartVariance,\r\n        params.rotationEnd,\r\n        params.rotationEndVariance,\r\n        // [3]\r\n        params.startColorRed,\r\n        params.startColorVarianceRed,\r\n        params.finishColorRed,\r\n        params.finishColorVarianceRed,\r\n      ]);\r\n      drawable.uniforms[\"data1\"].setValue([\r\n        // [0]\r\n        params.startColorGreen,\r\n        params.startColorVarianceGreen,\r\n        params.finishColorGreen,\r\n        params.finishColorVarianceGreen,\r\n        // [1]\r\n        params.startColorBlue,\r\n        params.startColorVarianceBlue,\r\n        params.finishColorBlue,\r\n        params.finishColorVarianceBlue,\r\n        // [2]\r\n        params.startColorAlpha,\r\n        params.startColorVarianceAlpha,\r\n        params.finishColorAlpha,\r\n        params.finishColorVarianceAlpha,\r\n        // [3]\r\n        params.angle,\r\n        params.angleVariance,\r\n        params.speed,\r\n        params.speedVariance,\r\n      ]);\r\n      drawable.uniforms[\"data2\"].setValue([\r\n        // [0]\r\n        params.gravityx,\r\n        params.gravityy,\r\n        params.radialAcceleration,\r\n        params.radialAccelVariance,\r\n        // [1]\r\n        params.tangentialAcceleration,\r\n        params.tangentialAccelVariance,\r\n        params.particleLifespan,\r\n        params.particleLifespanVariance,\r\n        // [2]\r\n        this.textureNames.indexOf(params.textureFileName),\r\n        0,\r\n        params.duration < 0 ? 1.0 : 0.0,\r\n        emitInterval,\r\n        // [3]\r\n        indices[0],\r\n        0,\r\n        0,\r\n        0,\r\n      ]);\r\n      drawable.draw();\r\n      phigl.FloatTexFramebuffer.unbind(gl);\r\n    },\r\n\r\n    _setupStoper: function () {\r\n      const gl = this.gl;\r\n\r\n      const program = phigl.Program(gl)\r\n        .attach(\"mega_stop.vs\")\r\n        .attach(\"mega_stop.fs\")\r\n        .link();\r\n      const positions = [];\r\n      const dataUvs = [];\r\n      const len = (texSize / 4) * (texSize / 4);\r\n      for (let index = 0; index < len; index++) {\r\n        const x = index % (texSize / 4);\r\n        const y = Math.floor(index / (texSize / 4));\r\n        positions.push(...[\r\n          posX(x), posY(y)\r\n        ]);\r\n        dataUvs.push(...[\r\n          uvX(x), uvY(y),\r\n        ]);\r\n      }\r\n      this.drawableStop = phigl.Drawable(gl)\r\n        .setProgram(program)\r\n        .setIndexValues([])\r\n        .declareAttributes(\"position\", \"dataUv\")\r\n        .setAttributeDataArray([{\r\n          unitSize: 2,\r\n          data: positions,\r\n        }, {\r\n          unitSize: 2,\r\n          data: dataUvs\r\n        }])\r\n        // .createVao()\r\n        .declareUniforms(\r\n          \"texture\",\r\n          \"texSize\",\r\n        )\r\n        .setDrawMode(gl.POINTS);\r\n    },\r\n\r\n    reserveStop: function (indices) {\r\n      this.reservedStopIndices.push(...indices);\r\n    },\r\n\r\n    execStop: function () {\r\n      if (this.reservedStopIndices.length == 0) return;\r\n\r\n      const gl = this.gl;\r\n\r\n      this.framebufferB.bind(gl);\r\n      gl.viewport(0, 0, texSize, texSize);\r\n      gl.disable(gl.CULL_FACE);\r\n      gl.disable(gl.BLEND);\r\n      gl.disable(gl.DEPTH_TEST);\r\n\r\n      const drawable = this.drawableStop;\r\n      drawable.setIndexValues(this.reservedStopIndices);\r\n      drawable.uniforms[\"texSize\"].setValue(texSize);\r\n      drawable.uniforms[\"texture\"].setValue(0).setTexture(this.framebufferA.texture);\r\n      drawable.draw();\r\n      phigl.FloatTexFramebuffer.unbind(gl);\r\n\r\n      this.swapBuffer();\r\n      this.copy();\r\n\r\n      this.reservedStopIndices.clear();\r\n    },\r\n\r\n    _setupUpdater: function () {\r\n      const gl = this.gl;\r\n\r\n      const program = phigl.Program(gl)\r\n        .attach(\"mega_update.vs\")\r\n        .attach(\"mega_update.fs\")\r\n        .link();\r\n      const indices = [];\r\n      const positions = [];\r\n      const dataUvs = [];\r\n      const len = (texSize / 4) * (texSize / 4);\r\n      for (let index = 0; index < len; index++) {\r\n        const x = index % (texSize / 4);\r\n        const y = Math.floor(index / (texSize / 4));\r\n        indices.push(index);\r\n        positions.push(...[\r\n          posX(x), posY(y)\r\n        ]);\r\n        dataUvs.push(...[\r\n          uvX(x), uvY(y),\r\n        ]);\r\n      }\r\n      this.drawableUpdate = phigl.Drawable(gl)\r\n        .setProgram(program)\r\n        .setIndexValues(indices)\r\n        .declareAttributes(\"position\", \"dataUv\")\r\n        .setAttributeDataArray([{\r\n          unitSize: 2,\r\n          data: positions\r\n        }, {\r\n          unitSize: 2,\r\n          data: dataUvs\r\n        }])\r\n        .createVao()\r\n        .declareUniforms(\r\n          \"texture\",\r\n          \"texSize\",\r\n          \"time\",\r\n          \"deltaTime\",\r\n          \"deltaPosition\",\r\n          \"updateVelocity\",\r\n        )\r\n        .setDrawMode(gl.POINTS);\r\n    },\r\n\r\n    update: function (deltaPosition = [0, 0], deltaSec = 0.0166) { // 0.0166 = 1 / 60\r\n      this.execStop();\r\n\r\n      this.time += deltaSec;\r\n      this.velocityUpdateTime -= deltaSec;\r\n\r\n      const gl = this.gl;\r\n\r\n      this.framebufferB.bind(gl);\r\n      gl.viewport(0, 0, texSize, texSize);\r\n      gl.clearColor(0, 0, 0, 0);\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n      gl.disable(gl.CULL_FACE);\r\n      gl.disable(gl.BLEND);\r\n      gl.disable(gl.DEPTH_TEST);\r\n\r\n      const drawable = this.drawableUpdate;\r\n      drawable.uniforms[\"texture\"].setValue(0).setTexture(this.framebufferA.texture);\r\n      drawable.uniforms[\"texSize\"].setValue(texSize);\r\n      drawable.uniforms[\"time\"].setValue(this.time);\r\n      drawable.uniforms[\"deltaTime\"].setValue(deltaSec);\r\n      drawable.uniforms[\"deltaPosition\"].setValue(deltaPosition);\r\n      drawable.uniforms[\"updateVelocity\"].setValue(true);\r\n      drawable.draw();\r\n      phigl.FloatTexFramebuffer.unbind(gl);\r\n\r\n      this.swapBuffer();\r\n\r\n      if (this.velocityUpdateTime <= 0) {\r\n        this.velocityUpdateTime = 1 / 10;\r\n      }\r\n    },\r\n\r\n    _setupDrawer: function () {\r\n      const gl = this.gl;\r\n\r\n      const program = phigl.Program(gl)\r\n        .attach(\"mega_draw.vs\")\r\n        .attach(\"mega_draw.fs\")\r\n        .link();\r\n      const indices = [];\r\n      const positions = [];\r\n      const uvs = [];\r\n      const dataUvs = [];\r\n      const len = (texSize / 4) * (texSize / 4);\r\n      for (let index = 0; index < len; index++) {\r\n        const x = index % (texSize / 4);\r\n        const y = Math.floor(index / (texSize / 4));\r\n        indices.push(...[\r\n          index * 4 + 0, index * 4 + 1, index * 4 + 2,\r\n          index * 4 + 1, index * 4 + 3, index * 4 + 2,\r\n        ]);\r\n        positions.push(...[\r\n          -0.5, 0.5,\r\n          0.5, 0.5,\r\n          -0.5, -0.5,\r\n          0.5, -0.5,\r\n        ]);\r\n        uvs.push(...[\r\n          0, 1,\r\n          1, 1,\r\n          0, 0,\r\n          1, 0,\r\n        ]);\r\n        dataUvs.push(...[\r\n          uvX(x), uvY(y),\r\n          uvX(x), uvY(y),\r\n          uvX(x), uvY(y),\r\n          uvX(x), uvY(y),\r\n        ]);\r\n      }\r\n      this.drawableDraw = phigl.Drawable(gl)\r\n        .setProgram(program)\r\n        .setIndexValues(indices)\r\n        .declareAttributes(\"position\", \"uv\", \"dataUv\")\r\n        .setAttributeDataArray([{\r\n          unitSize: 2,\r\n          data: positions,\r\n        }, {\r\n          unitSize: 2,\r\n          data: uvs,\r\n        }, {\r\n          unitSize: 2,\r\n          data: dataUvs,\r\n        }])\r\n        .createVao()\r\n        .declareUniforms(\r\n          \"texture\",\r\n          \"texSize\",\r\n          \"time\",\r\n          \"screenSize\",\r\n          \"particleTexture0\",\r\n          \"particleTexture1\",\r\n          \"particleTexture2\",\r\n          \"particleTexture3\",\r\n          \"particleTexture4\",\r\n          \"particleTexture5\",\r\n          \"particleTexture6\",\r\n          \"particleTexture7\",\r\n        )\r\n        .setDrawMode(gl.TRIANGLES);\r\n    },\r\n\r\n    draw: function (canvasWidth, canvasHeight) {\r\n      const gl = this.gl;\r\n\r\n      gl.disable(gl.CULL_FACE);\r\n      gl.disable(gl.DEPTH_TEST);\r\n      gl.enable(gl.BLEND);\r\n      // gl.blendEquation(gl.FUNC_ADD);\r\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\r\n\r\n      const drawable = this.drawableDraw;\r\n      drawable.uniforms[\"texture\"].setValue(0).setTexture(this.framebufferA.texture);\r\n      drawable.uniforms[\"texSize\"].setValue(texSize);\r\n      drawable.uniforms[\"time\"].setValue(this.time);\r\n      drawable.uniforms[\"screenSize\"].setValue([canvasWidth, canvasHeight]);\r\n      for (let i = 0, len = this.textureNames.length; i < len; i++) {\r\n        drawable.uniforms[\"particleTexture\" + i].setValue(1 + i).setTexture(this.textures[this.textureNames[i]]);\r\n      }\r\n      for (let i = this.textureNames.length; i < 8; i++) {\r\n        drawable.uniforms[\"particleTexture\" + i].setValue(1 + i).setTexture(this.textures[this.textureNames[0]]);\r\n      }\r\n      drawable.draw();\r\n    },\r\n\r\n    _setupSet: function () {\r\n      const gl = this.gl;\r\n\r\n      const program = phigl.Program(gl)\r\n        .attach(\"mega_set.vs\")\r\n        .attach(\"mega_set.fs\")\r\n        .link();\r\n      this.drawableSet = phigl.Drawable(gl)\r\n        .setProgram(program)\r\n        .setIndexValues([0])\r\n        .createVao()\r\n        .declareUniforms(\r\n          \"position\",\r\n          \"section0\",\r\n          \"section1\",\r\n          \"section2\",\r\n          \"section3\",\r\n          \"section4\",\r\n          \"section5\",\r\n          \"section6\",\r\n          \"section7\",\r\n          \"section8\",\r\n          \"section9\",\r\n          \"section10\",\r\n          \"section11\",\r\n          \"section12\",\r\n          \"section13\",\r\n          \"section14\",\r\n          \"section15\",\r\n        )\r\n        .setDrawMode(gl.POINTS);\r\n    },\r\n\r\n    set: function (params) {\r\n      const gl = this.gl;\r\n\r\n      this.framebufferA.bind(gl);\r\n      gl.viewport(0, 0, texSize, texSize);\r\n      gl.disable(gl.CULL_FACE);\r\n      gl.disable(gl.DEPTH_TEST);\r\n      gl.disable(gl.BLEND);\r\n\r\n      const drawable = this.drawableSet;\r\n      const x = params.index % (texSize / 4);\r\n      const y = Math.floor(params.index / (texSize / 4));\r\n      drawable.uniforms[\"position\"].setValue([posX(x), posY(y)]);\r\n      drawable.uniforms[\"section0\"].setValue(params.section0 || [0.0, 0.0, 0.0, 0.0]);\r\n      drawable.uniforms[\"section1\"].setValue(params.section1 || [0.0, 0.0, 0.0, 0.0]);\r\n      drawable.uniforms[\"section2\"].setValue(params.section2 || [0.0, 0.0, 0.0, 0.0]);\r\n      drawable.uniforms[\"section3\"].setValue(params.section3 || [0.0, 0.0, 0.0, 0.0]);\r\n      drawable.uniforms[\"section4\"].setValue(params.section4 || [0.0, 0.0, 0.0, 0.0]);\r\n      drawable.uniforms[\"section5\"].setValue(params.section5 || [0.0, 0.0, 0.0, 0.0]);\r\n      drawable.uniforms[\"section6\"].setValue(params.section6 || [0.0, 0.0, 0.0, 0.0]);\r\n      drawable.uniforms[\"section7\"].setValue(params.section7 || [0.0, 0.0, 0.0, 0.0]);\r\n      drawable.uniforms[\"section8\"].setValue(params.section8 || [0.0, 0.0, 0.0, 0.0]);\r\n      drawable.uniforms[\"section9\"].setValue(params.section9 || [0.0, 0.0, 0.0, 0.0]);\r\n      drawable.uniforms[\"section10\"].setValue(params.section10 || [0.0, 0.0, 0.0, 0.0]);\r\n      drawable.uniforms[\"section11\"].setValue(params.section11 || [0.0, 0.0, 0.0, 0.0]);\r\n      drawable.uniforms[\"section12\"].setValue(params.section12 || [0.0, 0.0, 0.0, 0.0]);\r\n      drawable.uniforms[\"section13\"].setValue(params.section13 || [0.0, 0.0, 0.0, 0.0]);\r\n      drawable.uniforms[\"section14\"].setValue(params.section14 || [0.0, 0.0, 0.0, 0.0]);\r\n      drawable.uniforms[\"section15\"].setValue(params.section15 || [0.0, 0.0, 0.0, 0.0]);\r\n      drawable.draw();\r\n      phigl.FloatTexFramebuffer.unbind(gl);\r\n    },\r\n\r\n    _setupCopy: function () {\r\n      const gl = this.gl;\r\n\r\n      const program = phigl.Program(gl)\r\n        .attach(\"mega_copy.vs\")\r\n        .attach(\"mega_copy.fs\")\r\n        .link();\r\n      const indices = [];\r\n      const positions = [];\r\n      const dataUvs = [];\r\n      const len = (texSize / 4) * (texSize / 4);\r\n      for (let index = 0; index < len; index++) {\r\n        const x = index % (texSize / 4);\r\n        const y = Math.floor(index / (texSize / 4));\r\n        indices.push(index);\r\n        positions.push(...[\r\n          posX(x), posY(y)\r\n        ]);\r\n        dataUvs.push(...[\r\n          uvX(x), uvY(y),\r\n        ]);\r\n      }\r\n      this.drawableCopy = phigl.Drawable(gl)\r\n        .setProgram(program)\r\n        .setIndexValues(indices)\r\n        .declareAttributes(\"position\", \"dataUv\")\r\n        .setAttributeDataArray([{\r\n          unitSize: 2,\r\n          data: positions\r\n        }, {\r\n          unitSize: 2,\r\n          data: dataUvs\r\n        }])\r\n        .createVao()\r\n        .declareUniforms(\r\n          \"texture\",\r\n          \"texSize\",\r\n        )\r\n        .setDrawMode(gl.POINTS);\r\n    },\r\n\r\n    copy: function () {\r\n      const gl = this.gl;\r\n\r\n      this.framebufferB.bind(gl);\r\n      gl.viewport(0, 0, texSize, texSize);\r\n      gl.clearColor(0, 0, 0, 0);\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n      gl.disable(gl.CULL_FACE);\r\n\r\n      const drawable = this.drawableCopy;\r\n      drawable.uniforms[\"texture\"].setValue(0).setTexture(this.framebufferA.texture);\r\n      drawable.uniforms[\"texSize\"].setValue(texSize);\r\n      drawable.draw();\r\n      phigl.FloatTexFramebuffer.unbind(gl);\r\n\r\n      this.swapBuffer();\r\n    },\r\n\r\n    test: function () {\r\n      const program = phigl.Program(gl)\r\n        .attach(\"mega_test.vs\")\r\n        .attach(\"mega_test.fs\")\r\n        .link();\r\n      const drawable = phigl.Drawable(gl)\r\n        .setProgram(program)\r\n        .setIndexValues([0, 1, 2, 1, 3, 2])\r\n        .declareAttributes(\"position\", \"uv\")\r\n        .setAttributeDataArray([{\r\n          unitSize: 2,\r\n          data: [\r\n            -1, 1,\r\n            1, 1,\r\n            -1, -1,\r\n            1, -1,\r\n          ],\r\n        }, {\r\n          unitSize: 2,\r\n          data: [\r\n            0, 1,\r\n            1, 1,\r\n            0, 0,\r\n            1, 0,\r\n          ],\r\n        }])\r\n        .createVao()\r\n        .declareUniforms(\r\n          \"texture\",\r\n        )\r\n        .setDrawMode(gl.TRIANGLES);\r\n\r\n      phigl.FloatTexFramebuffer.unbind(gl);\r\n      gl.viewport(0, 0, 32, 32);\r\n      gl.clearColor(0, 0, 0, 0);\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n      gl.disable(gl.CULL_FACE);\r\n      drawable.uniforms[\"texture\"].setValue(0).setTexture(this.framebufferA.texture);\r\n      drawable.draw();\r\n\r\n      console.log(\"test ok\");\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\n\n  phina.define(\"phina.particle2dx.ColoredTexture\", {\n    superClass: \"phina.graphics.Canvas\",\n\n    orig: null,\n\n    r: -1,\n    g: -1,\n    b: -1,\n\n    _textureName: null,\n    _domElementBackup: null,\n\n    init: function(options) {\n      this.superInit();\n      this.orig = phina.asset.AssetManager.get(\"image\", options.textureName);\n      this.setSize(this.orig.domElement.width, this.orig.domElement.height);\n\n      this._textureName = options.textureName;\n\n      this._canvasForCache = Array.range(0, 1000).map(function() {\n        return phina.graphics.Canvas().setSize(this.width, this.height);\n      }.bind(this));\n\n      this.setColor(1.0, 1.0, 1.0);\n    },\n\n    setColor: function(r, g, b) {\n      const nr = (~~(r * 256)) * 1;\n      const ng = (~~(g * 256)) * 1;\n      const nb = (~~(b * 256)) * 1;\n\n      if (this.r === nr && this.g === ng && this.b === nb) return;\n\n      this.r = nr;\n      this.g = ng;\n      this.b = nb;\n\n      const key = \"{_textureName},{r},{g},{b}\".format(this);\n      const cache = phina.particle2dx.ColoredTexture._cache;\n      if (cache[key]) {\n        if (!this._domElementBackup) this._domElementBackup = this.domElement;\n        this.domElement = cache[key].domElement;\n      } else {\n        if (this._domElementBackup) this.domElement = this._domElementBackup;\n\n        const ctx = this.context;\n        ctx.clearRect(0, 0, this.width, this.height);\n        ctx.globalCompositeOperation = \"source-over\";\n        ctx.drawImage(this.orig.domElement, 0, 0);\n        ctx.globalCompositeOperation = \"source-in\";\n        ctx.fillStyle = \"rgb({r},{g},{b})\".format(this);\n        ctx.fillRect(0, 0, this.width, this.height);\n\n        const clone = this._canvasForCache.length ? this._canvasForCache.shift() : phina.graphics.Canvas().setSize(this.width, this.height);\n        clone.context.drawImage(this.domElement, 0, 0);\n        cache[key] = clone;\n      }\n    },\n\n    _static: {\n      _cache: {},\n    },\n\n  });\n\n});","phina.namespace(function() {\n\n  phina.define(\"phina.particle2dx.Emitter\", {\n    superClass: \"phina.app.Object2D\",\n\n    active: false,\n    random: null,\n\n    particles: null,\n\n    emitCount: 0,\n    emitPerMillisec: 0,\n\n    init: function(options) {\n      this.superInit(options);\n      options = ({}).$safe(options, phina.particle2dx.Emitter.defaults);\n\n      this.random = phina.util.Random();\n\n      this._initProperties(options);\n      this._initParticles(options);\n\n      this.emitPerMillisec = this.maxParticles / (this.particleLifespan * 1000);\n    },\n\n    _initProperties: function(options) {\n      var json = phina.asset.AssetManager.get(\"json\", options.jsonName).data;\n\n      this.duration = json.duration;\n\n      // 0:Gravity 1:Radius\n      this.emitterType = json.emitterType;\n\n      // this.configName = json.configName;\n\n      this.particleLifespan = json.particleLifespan;\n      this.particleLifespanVariance = json.particleLifespanVariance;\n      this.maxParticles = json.maxParticles; // なぜか全然足りないから２倍作っとく\n      this.angle = json.angle;\n      this.angleVariance = json.angleVariance;\n      this.speed = json.speed;\n      this.speedVariance = json.speedVariance;\n      this.sourcePositionVariancex = json.sourcePositionVariancex;\n      this.sourcePositionVariancey = json.sourcePositionVariancey;\n      this.gravityx = json.gravityx;\n      this.gravityy = json.gravityy;\n\n      // 中心からの加速度\n      this.radialAcceleration = json.radialAcceleration;\n      this.radialAccelVariance = json.radialAccelVariance;\n\n      // 接線加速度\n      this.tangentialAcceleration = json.tangentialAcceleration;\n      this.tangentialAccelVariance = json.tangentialAccelVariance;\n\n      this.maxRadius = json.maxRadius;\n      this.maxRadiusVariance = json.maxRadiusVariance;\n      this.minRadius = json.minRadius;\n      this.minRadiusVariance = json.minRadiusVariance;\n      this.rotatePerSecond = json.rotatePerSecond;\n      this.rotatePerSecondVariance = json.rotatePerSecondVariance;\n\n      // 1:additive 771:normal\n      this.blendFuncDestination = json.blendFuncDestination;\n      // 770固定\n      this.blendFuncSource = json.blendFuncSource;\n\n      this.startParticleSize = json.startParticleSize;\n      this.startParticleSizeVariance = json.startParticleSizeVariance;\n      if (json.finishParticleSize == -1) {\n        this.finishParticleSize = this.startParticleSize;\n      } else {\n        this.finishParticleSize = json.finishParticleSize;\n      }\n      this.finishParticleSizeVariance = json.finishParticleSizeVariance;\n      this.rotationStart = json.rotationStart;\n      this.rotationStartVariance = json.rotationStartVariance;\n      this.rotationEnd = json.rotationEnd;\n      this.rotationEndVariance = json.rotationEndVariance;\n\n      this.startColorRed = json.startColorRed;\n      this.startColorGreen = json.startColorGreen;\n      this.startColorBlue = json.startColorBlue;\n      this.startColorAlpha = json.startColorAlpha;\n      this.startColorVarianceRed = json.startColorVarianceRed;\n      this.startColorVarianceGreen = json.startColorVarianceGreen;\n      this.startColorVarianceBlue = json.startColorVarianceBlue;\n      this.startColorVarianceAlpha = json.startColorVarianceAlpha;\n      this.finishColorRed = json.finishColorRed;\n      this.finishColorGreen = json.finishColorGreen;\n      this.finishColorBlue = json.finishColorBlue;\n      this.finishColorAlpha = json.finishColorAlpha;\n      this.finishColorVarianceRed = json.finishColorVarianceRed;\n      this.finishColorVarianceGreen = json.finishColorVarianceGreen;\n      this.finishColorVarianceBlue = json.finishColorVarianceBlue;\n      this.finishColorVarianceAlpha = json.finishColorVarianceAlpha;\n\n      // this.textureFileName = json.textureFileName;\n      // this.textureImageData = json.textureImageData;\n      // this.yCoordFlipped = json.yCoordFlipped;\n    },\n\n    _initParticles: function(options) {\n      this.particles = Array.range(0, this.maxParticles)\n        .map(function(index) {\n          var p = this._createParticle(options.textureName, index);\n          p.on(\"removed\", function() {\n            p.visible = false;\n            this.particles.push(p);\n          }.bind(this));\n          return p;\n        }.bind(this));\n    },\n\n    _createParticle: function(textureName, index) {\n      throw \"no impl\";\n    },\n\n    _createParticleAccessory: function() {\n      return phina.particle2dx.Particle();\n    },\n\n    start: function() {\n      this.active = true;\n      if (this.duration > 0) {\n        this.tweener\n          .clear()\n          .wait(this.duration * 1000)\n          .set({ active: false });\n      }\n\n      return this;\n    },\n\n    stop: function() {\n      this.active = false;\n      return this;\n    },\n\n    update: function(app) {\n      if (!this.active) return;\n\n      this.emitCount += this.emitPerMillisec * app.deltaTime;\n      for (var i = 0; i < ~~this.emitCount; i++) {\n        this.emit();\n      }\n      this.emitCount -= ~~(this.emitCount);\n    },\n\n    emit: function() {\n      var p = this.particles.shift();\n      if (!p) {\n        // console.warn(\"たりない\");\n        return;\n      }\n      p.addChildTo(this.parent);\n\n      var r = this.random;\n      var particle = p.particle;\n\n      particle.life = this.particleLifespan + r.randfloat(-this.particleLifespanVariance, this.particleLifespanVariance);\n      particle.emitterType = this.emitterType;\n      particle.emitterPosition.set(this.x, this.y);\n\n      var sizeFrom = this.startParticleSize + r.randfloat(-this.startParticleSizeVariance, this.startParticleSizeVariance);\n      var sizeTo = this.finishParticleSize + r.randfloat(-this.finishParticleSizeVariance, this.finishParticleSizeVariance);\n      var rotationFrom = this.rotationStart + r.randfloat(-this.rotationStartVariance, this.rotationStartVariance);\n      var rotationTo = this.rotationEnd + r.randfloat(-this.rotationEndVariance, this.rotationEndVariance);\n\n      var rFrom = this.startColorRed + r.randfloat(-this.startColorVarianceRed, this.startColorVarianceRed);\n      var rTo = this.finishColorRed + r.randfloat(-this.finishColorVarianceRed, this.finishColorVarianceRed);\n      var gFrom = this.startColorGreen + r.randfloat(-this.startColorVarianceGreen, this.startColorVarianceGreen);\n      var gTo = this.finishColorGreen + r.randfloat(-this.finishColorVarianceGreen, this.finishColorVarianceGreen);\n      var bFrom = this.startColorBlue + r.randfloat(-this.startColorVarianceBlue, this.startColorVarianceBlue);\n      var bTo = this.finishColorBlue + r.randfloat(-this.finishColorVarianceBlue, this.finishColorVarianceBlue);\n      var aFrom = this.startColorAlpha + r.randfloat(-this.startColorVarianceAlpha, this.startColorVarianceAlpha);\n      var aTo = this.finishColorAlpha + r.randfloat(-this.finishColorVarianceAlpha, this.finishColorVarianceAlpha);\n\n      if (this.emitterType === 0) {\n\n        particle.position.x = this.x + r.randfloat(-this.sourcePositionVariancex, this.sourcePositionVariancex);\n        particle.position.y = this.y + r.randfloat(-this.sourcePositionVariancey, this.sourcePositionVariancey);\n\n        var angle = (this.angle + r.randfloat(-this.angleVariance, this.angleVariance)).toRadian();\n        var speed = this.speed + r.randfloat(-this.speedVariance, this.speedVariance);\n\n        particle.velocity.set(Math.cos(angle) * speed, -Math.sin(angle) * speed);\n        particle.gravity.set(this.gravityx, this.gravityy);\n        particle.initRadialAccel(this.radialAcceleration + r.randfloat(-this.radialAccelVariance, this.radialAccelVariance));\n        particle.tangentialAccel = this.tangentialAcceleration + r.randfloat(-this.tangentialAccelVariance, this.tangentialAccelVariance);\n\n        particle.set({\n          sizeFrom: sizeFrom,\n          sizeTo: sizeTo,\n          rotationFrom: rotationFrom,\n          rotationTo: rotationTo,\n          rFrom: rFrom,\n          rTo: rTo,\n          gFrom: gFrom,\n          gTo: gTo,\n          bFrom: bFrom,\n          bTo: bTo,\n          aFrom: aFrom,\n          aTo: aTo,\n        });\n\n      } else if (this.emitterType === 1) {\n\n        particle.posAngle = this.angle + r.randfloat(-this.angleVariance, this.angleVariance);\n\n        var radiusFrom = this.maxRadius + r.randfloat(-this.maxRadiusVariance, this.maxRadiusVariance);\n        var radiusTo = this.minRadius + r.randfloat(-this.minRadiusVariance, this.minRadiusVariance);\n        particle.rotPerSec = (this.rotatePerSecond + r.randfloat(-this.rotatePerSecondVariance, this.rotatePerSecondVariance)).toRadian();\n\n        particle.set({\n          sizeFrom: sizeFrom,\n          sizeTo: sizeTo,\n          rotationFrom: rotationFrom,\n          rotationTo: rotationTo,\n          rFrom: rFrom,\n          rTo: rTo,\n          gFrom: gFrom,\n          gTo: gTo,\n          bFrom: bFrom,\n          bTo: bTo,\n          aFrom: aFrom,\n          aTo: aTo,\n          radiusFrom: radiusFrom,\n          radiusTo: radiusTo,\n        });\n      }\n\n      particle.update({ deltaTime: 0 });\n    },\n\n    _static: {\n      defaults: {\n        jsonName: null,\n        textureName: null,\n      },\n    },\n\n  });\n\n});","phina.namespace(function() {\n\n  phina.define(\"phina.particle2dx.EmitterGL\", {\n    superClass: \"phina.particle2dx.Emitter\",\n\n    gl: null,\n    texture: null,\n\n    init: function(options) {\n      this.superInit(options);\n      this.textureName = options.textureName;\n    },\n\n    _initParticles: function(options) {\n      this.oneInstanceData = [\n        // instanceVisible\n        0,\n        // instancePosition\n        0, 0,\n        // instanceRotation\n        0,\n        // instanceScale\n        1,\n        // instanceColor\n        0, 0, 0, 0,\n      ];\n\n      var rawArray = Array.range(0, this.maxParticles).map(function() {\n        return this.oneInstanceData;\n      }.bind(this)).flatten();\n      this.instanceData = new Float32Array(rawArray);\n\n      this.superMethod(\"_initParticles\", options);\n    },\n\n    _createParticle: function(textureName, index) {\n      var p = phina.particle2dx.ParticleGL(this, index);\n      p.particle = this._createParticleAccessory().attachTo(p);\n      return p;\n    },\n\n    setup: function(layer) {\n      var gl = layer.gl;\n      var ext = layer.ext;\n      var vpMatrix = layer.vpMatrix;\n\n      this.texture = phigl.Texture(gl, this.textureName);\n\n      this.drawable = phigl.InstancedDrawable(gl, ext)\n        .setProgram(this._createProgram(gl))\n        .setIndexValues([0, 1, 2, 2, 1, 3])\n        .declareAttributes(\"position\", \"uv\")\n        .setAttributeDataArray([{\n          unitSize: 2,\n          data: [\n            // 左上\n            -0.5, +0.5,\n            // 左下\n            -0.5, -0.5,\n            // 右上\n            +0.5, +0.5,\n            // 右下\n            +0.5, -0.5,\n          ]\n        }, {\n          unitSize: 2,\n          data: [\n            // 左上\n            0, 1,\n            // 左下\n            0, 0,\n            // 右上\n            1, 1,\n            // 右下\n            1, 0,\n          ],\n        }])\n        .declareInstanceAttributes([\n          \"instanceVisible\",\n          \"instancePosition\",\n          \"instanceRotation\",\n          \"instanceScale\",\n          \"instanceColor\",\n        ])\n        .declareUniforms(\"vpMatrix\", \"texture\");\n\n      return this;\n    },\n\n    render: function(layer) {\n      var gl = layer.gl;\n      if (this.blendFuncDestination === 1) {\n        gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE);\n        gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n      } else if (this.blendFuncDestination === 771) {\n        gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);\n        gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n      }\n\n      this.drawable.uniforms[\"vpMatrix\"].setValue(layer.vpMatrix);\n      this.drawable.uniforms[\"texture\"].setValue(0).setTexture(this.texture);\n      this.drawable.setInstanceAttributeData(this.instanceData);\n      this.drawable.draw(this.maxParticles);\n    },\n\n    _createProgram: function(gl) {\n      var srcV = phina.particle2dx.EmitterGL.vertexShaderSource;\n      var srcF = phina.particle2dx.EmitterGL.fragmentShaderSource;\n\n      return phigl.Program(gl)\n        .attach(phigl.VertexShader().setSource(srcV))\n        .attach(phigl.FragmentShader().setSource(srcF))\n        .link();\n    },\n\n    _static: {\n\n      vertexShaderSource: [\n        \"attribute vec2 position;\",\n        \"attribute vec2 uv;\",\n\n        \"attribute float instanceVisible;\",\n        \"attribute vec2 instancePosition;\",\n        \"attribute float instanceRotation;\",\n        \"attribute float instanceScale;\",\n        \"attribute vec4 instanceColor;\",\n\n        \"uniform mat4 vpMatrix;\",\n\n        \"varying vec2 vUv;\",\n        \"varying vec4 vColor;\",\n\n        \"void main(void) {\",\n        \"  vUv = uv;\",\n        \"  vColor = instanceColor;\",\n        \"  if (instanceVisible > 0.5) {\",\n        \"    float s = sin(-instanceRotation);\",\n        \"    float c = cos(-instanceRotation);\",\n        \"    mat4 m = mat4(\",\n        \"      vec4(c, -s, 0.0, 0.0),\",\n        \"      vec4(s, c, 0.0, 0.0),\",\n        \"      vec4(0.0, 0.0, 1.0, 0.0),\",\n        \"      vec4(instancePosition, 0.0, 1.0)\",\n        \"    ) * mat4(\",\n        \"      vec4(instanceScale, 0.0, 0.0, 0.0),\",\n        \"      vec4(0.0, instanceScale, 0.0, 0.0),\",\n        \"      vec4(0.0, 0.0, 1.0, 0.0),\",\n        \"      vec4(0.0, 0.0, 0.0, 1.0)\",\n        \"    );\",\n        \"    mat4 mvpMatrix = vpMatrix * m;\",\n        \"    gl_Position = mvpMatrix * vec4(position, 0.0, 1.0);\",\n        \"  } else {\",\n        \"    gl_Position = vec4(0.0);\",\n        \"  }\",\n        \"}\",\n      ].join(\"\\n\"),\n\n      fragmentShaderSource: [\n        \"precision mediump float;\",\n\n        \"uniform sampler2D texture;\",\n\n        \"varying vec2 vUv;\",\n        \"varying vec4 vColor;\",\n\n        \"void main(void) {\",\n        \"  vec4 col = texture2D(texture, vUv);\",\n        \"  if (col.a == 0.0) discard;\",\n        \"  gl_FragColor = col * vColor;\",\n        \"}\",\n      ].join(\"\\n\"),\n    }\n\n  });\n\n  phina.define(\"phina.particle2dx.ParticleGL\", {\n    superClass: \"phina.app.Element\",\n\n    oneDataLength: 0,\n    instanceData: null,\n    index: 0,\n\n    init: function(emitter, index) {\n      this.superInit();\n      this.oneDataLength = emitter.oneInstanceData.length;\n      this.instanceData = emitter.instanceData;\n      this.index = index;\n    },\n\n    _accessor: {\n      visible: {\n        get: function() {\n          return !!this.instanceData[this.oneDataLength * this.index + 0];\n        },\n        set: function(v) {\n          this.instanceData[this.oneDataLength * this.index + 0] = v ? 1 : 0;\n        },\n      },\n      x: {\n        get: function() {\n          return this.instanceData[this.oneDataLength * this.index + 1];\n        },\n        set: function(v) {\n          this.instanceData[this.oneDataLength * this.index + 1] = v;\n        },\n      },\n      y: {\n        get: function() {\n          return this.instanceData[this.oneDataLength * this.index + 2];\n        },\n        set: function(v) {\n          this.instanceData[this.oneDataLength * this.index + 2] = v;\n        },\n      },\n      rotation: {\n        get: function() {\n          return this.instanceData[this.oneDataLength * this.index + 3];\n        },\n        set: function(v) {\n          this.instanceData[this.oneDataLength * this.index + 3] = v;\n        },\n      },\n      scale: {\n        get: function() {\n          return this.instanceData[this.oneDataLength * this.index + 4];\n        },\n        set: function(v) {\n          this.instanceData[this.oneDataLength * this.index + 4] = v;\n        },\n      },\n      r: {\n        get: function() {\n          return this.instanceData[this.oneDataLength * this.index + 5];\n        },\n        set: function(v) {\n          this.instanceData[this.oneDataLength * this.index + 5] = v;\n        },\n      },\n      g: {\n        get: function() {\n          return this.instanceData[this.oneDataLength * this.index + 6];\n        },\n        set: function(v) {\n          this.instanceData[this.oneDataLength * this.index + 6] = v;\n        },\n      },\n      b: {\n        get: function() {\n          return this.instanceData[this.oneDataLength * this.index + 7];\n        },\n        set: function(v) {\n          this.instanceData[this.oneDataLength * this.index + 7] = v;\n        },\n      },\n      a: {\n        get: function() {\n          return this.instanceData[this.oneDataLength * this.index + 8];\n        },\n        set: function(v) {\n          this.instanceData[this.oneDataLength * this.index + 8] = v;\n        },\n      },\n    },\n  });\n\n});","{\n\t\"startColorAlpha\": 1,\n\t\"startParticleSizeVariance\": 1,\n\t\"startColorGreen\": 0.25,\n\t\"rotatePerSecond\": 0,\n\t\"radialAcceleration\": 0,\n\t\"yCoordFlipped\": -1,\n\t\"emitterType\": 0,\n\t\"blendFuncSource\": 770 ,\n\t\"finishColorVarianceAlpha\": 0,\n\t\"rotationEnd\": 0,\n\t\"startColorVarianceBlue\": 0,\n\t\"rotatePerSecondVariance\": 0,\n\t\"particleLifespan\": 1.24,\n\t\"minRadius\": 0,\n\t\"configName\": \"fire\",\n\t\"tangentialAcceleration\": 0,\n\t\"rotationStart\": 0,\n\t\"startColorVarianceGreen\": 0,\n\t\"speed\": 60,\n\t\"minRadiusVariance\": 0,\n\t\"finishColorVarianceBlue\": 0,\n\t\"finishColorBlue\": 0,\n\t\"finishColorGreen\": 0,\n\t\"blendFuncDestination\": 1,\n\t\"finishColorAlpha\": 1,\n\t\"sourcePositionVariancex\": 10,\n\t\"startParticleSize\": 5,\n\t\"sourcePositionVariancey\": 5,\n\t\"startColorRed\": 0.75,\n\t\"finishColorVarianceRed\": 0,\n\t\"textureFileName\": \"rain.png\",\n\t\"startColorVarianceAlpha\": 0,\n\t\"maxParticles\": 207,\n\t\"finishColorVarianceGreen\": 0,\n\t\"finishParticleSize\": -1,\n\t\"duration\": -1,\n\t\"startColorVarianceRed\": 0,\n\t\"finishColorRed\": 0,\n\t\"gravityx\": 0,\n\t\"maxRadiusVariance\": 0,\n\t\"finishParticleSizeVariance\": 0,\n\t\"gravityy\": 0,\n\t\"rotationEndVariance\": 0,\n\t\"startColorBlue\": 0.11,\n\t\"rotationStartVariance\": 0,\n\t\"speedVariance\": 20,\n\t\"radialAccelVariance\": 0,\n\t\"textureImageData\": \"\",\n\t\"tangentialAccelVariance\": 0,\n\t\"particleLifespanVariance\": 0.25,\n\t\"angleVariance\": 10,\n\t\"angle\": -90,\n\t\"maxRadius\": 0\n}","�PNG\r\n\u001a\n\u0000\u0000\u0000\rIHDR\u0000\u0000\u0000 \u0000\u0000\u0000 \b\u0006\u0000\u0000\u0000szz�\u0000\u0000\u0000\u0004gAMA\u0000\u0000��7\u0005��\u0000\u0000\u0000\u0019tEXtSoftware\u0000Adobe ImageReadyq�e<\u0000\u0000\u0002dIDATx�ė�n� \u0010E��-K��7__\f�Į-ݩn�8���D��\u0006̙�\u0001�˲d�|U/�iV\u0015�rh��U��byb\u00046�\u0006���\b�}U��T�g\u0011���>\u000bDA\u00003\u0019\u001f!C�_\u0002hI\u001d \u001a�(\t�N�=dW9���\u0000\u001dԓ:�4\u000f\u0000<�YJ�Dʦ\u0002�ǧUg�D\u0010\u0012\u0005\r0��R32&�8�\f�\u0006@\u000f��U\u0017\u0005ђw\u0002 ��\u0019\u0018(M\u0005\u0019���\b�\u0005\u0010W|O\u0001\u0010����v�.�\u0014���DQ�R\u0014:2\"\u0000\u0013��R�\u0005��c\u0000����8�Tt\u0018[PXm��j�a��\u0003�\b�U�@@>\u0000�SG�\u000e8�zsdW�\u0016����\u001aLM�hծ�\u0000��K����Lu�6�?*|�\fP`�J�\u0018��\"u�c\\��\u0019\u0015����Z��4}\u0003H_\u0017�R\u0001\u0019��\u001e�00�!�\r����\f��\u001b�I�\u0004\u0015*R\u0006i1ʳ\"q�\u001f\u0000K�f��7�ox\u000f�]Ƥ��#\u0005l�N�㕷�@�\u0006\u001c�\u001f\t*���=\u0000ݭ\u0002-�Mf�j\u001f�.���-�O\u0004\u001e\u0014Ь\u0001<�\\\u001f�.r�I����'�bi���\u0004�\u000f�\u001aQPa\u0016�\u001b�^\u0003u5�\to��\rs\u0007�a��Y0E��z���\u0007g�@0�U�\u0011\u0005�X��H�`�\t��f��\u000e�t\u001c�XDw�Y��g\u0000\u0012�O*N\u0017�\u001f�\u0000����#���nD�JE2@��|���\u001c��\t�H!&_J��nO��#�b�ʭX\"�\u0000G�\u000b|�s�۟��\u0017\u001eN��l�g�\"{��K�\u0001\u0000�!r�\b\u0010\u0007}\u0000\u0000\u0000\u0000IEND�B`�","phina.namespace(function() {\n\n  phina.define(\"phina.particle2dx.Particle\", {\n    superClass: \"phina.accessory.Accessory\",\n\n    emitterType: 0,\n\n    r: 1.0,\n    g: 1.0,\n    b: 1.0,\n    a: 1.0,\n\n    emitterPosition: null,\n    life: 0,\n\n    position: null,\n    velocity: null,\n    gravity: null,\n    radialAccel: null,\n    tangentialAccel: 0,\n    _tangentialAccel: null,\n\n    posAngle: 0,\n    rotPerSec: 0,\n\n    init: function() {\n      this.superInit();\n\n      this.position = phina.geom.Vector2();\n      this.velocity = phina.geom.Vector2();\n      this.gravity = phina.geom.Vector2();\n      this.radialAccel = phina.geom.Vector2();\n      this.emitterPosition = phina.geom.Vector2();\n      this._tangentialAccel = phina.geom.Vector2();\n    },\n\n    initRadialAccel: function(radialAccelLength) {\n      this.radialAccel\n        .set(this.position.x - this.emitterPosition.x, this.position.y - this.emitterPosition.y)\n        .normalize()\n        .mul(radialAccelLength);\n    },\n\n    set: function(data) {\n      var duration = this.life * 1000;\n      var p = this.target;\n      p.visible = true;\n      if (this.emitterType === 0) {\n        p.$extend({\n          scale: data.sizeFrom,\n          rotation: data.rotationFrom,\n          r: data.rFrom,\n          g: data.gFrom,\n          b: data.bFrom,\n          a: data.aFrom,\n        });\n        p.tweener\n          .clear()\n          .to({\n            scale: data.sizeTo,\n            rotation: data.rotationTo,\n            r: data.rTo,\n            g: data.gTo,\n            b: data.bTo,\n            a: data.aTo,\n          }, duration)\n          .call(function() {\n            p.remove();\n          });\n      } else if (this.emitterType === 1) {\n        p.$extend({\n          scale: data.sizeFrom,\n          rotation: data.rotationFrom,\n          r: data.rFrom,\n          g: data.gFrom,\n          b: data.bFrom,\n          a: data.aFrom,\n          posRadius: data.radiusFrom,\n        });\n        p.tweener\n          .clear()\n          .to({\n            scale: data.sizeTo,\n            rotation: data.rotationTo,\n            r: data.rTo,\n            g: data.gTo,\n            b: data.bTo,\n            a: data.aTo,\n            posRadius: data.radiusTo,\n          }, duration)\n          .call(function() {\n            p.remove();\n          });\n      }\n    },\n\n    update: function(app) {\n      var deltaSec = app.deltaTime * 0.001;\n\n      if (this.emitterType === 0) {\n        add(this.velocity, this.gravity, deltaSec);\n        add(this.velocity, this.radialAccel, deltaSec);\n\n        if (this.tangentialAccel) {\n          this._tangentialAccel\n            .set(this.position.x - this.emitterPosition.x, this.position.y - this.emitterPosition.y);\n\n          this._tangentialAccel\n            .set(-this._tangentialAccel.y, this._tangentialAccel.x) // 90度回す\n            .normalize()\n            .mul(this.tangentialAccel);\n          add(this.velocity, this._tangentialAccel, deltaSec);\n        }\n\n        add(this.position, this.velocity, deltaSec);\n      } else if (this.emitterType === 1) {\n        this.posAngle -= this.rotPerSec * deltaSec;\n        this.position.set(\n          this.emitterPosition.x + Math.cos(this.posAngle) * this.target.posRadius,\n          this.emitterPosition.y - Math.sin(this.posAngle) * this.target.posRadius\n        );\n      }\n\n      this.target.x = this.position.x;\n      this.target.y = this.position.y;\n    },\n\n  });\n\n  var add = function(vec1, vec2, deltaSec) {\n    vec1.x += vec2.x * deltaSec;\n    vec1.y -= vec2.y * deltaSec;\n  };\n\n});","phina.namespace(function() {\n\n  phina.define(\"phina.particle2dx.ParticleCanvas\", {\n    superClass: \"phina.display.Sprite\",\n\n    particle: null,\n\n    init: function(image) {\n      this.superInit(image);\n      this.particle = phina.particle2dx.Particle().attachTo(this);\n    },\n\n    draw: function(canvas) {\n      if (this.image.setColor) this.image.setColor(this.r, this.g, this.b);\n      this.superMethod(\"draw\", canvas);\n    },\n\n  });\n\n});","phina.namespace(function() {\n\n  phina.define(\"phina.particle2dx.ParticleGLLayer\", {\n    superClass: \"phina.display.Layer\",\n\n    emitters: null,\n\n    init: function(options) {\n      this.superInit(options);\n      options = ({}).$safe(options, phina.particle2dx.ParticleGLLayer.defaults);\n\n      this.emitters = [];\n\n      this.domElement = options.domElement || document.createElement(\"canvas\");\n      this.domElement.width = this.width * options.quality;\n      this.domElement.height = this.height * options.quality;\n\n      var gl = this.domElement.getContext(\"webgl\") || this.domElement.getContext(\"experimental-webgl\");\n\n      gl.viewport(0, 0, this.domElement.width, this.domElement.height);\n      gl.clearColor(0.0, 0.0, 0.0, 0.0);\n      gl.enable(gl.BLEND);\n      gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE);\n      gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n\n      var projectionMatrix = mat4.create();\n      var viewMatrix = mat4.create();\n      var modelMatrix = mat4.create();\n      var vpMatrix = mat4.create();\n      mat4.ortho(projectionMatrix, 0, this.width, this.height, 0, 0.9, 1.1);\n      mat4.lookAt(viewMatrix, [0, 0, 1], [0, 0, 0], [0, 1, 0]);\n      mat4.mul(vpMatrix, projectionMatrix, viewMatrix);\n\n      this.gl = gl;\n      this.ext = phigl.Extensions.getInstancedArrays(gl);\n      this.vpMatrix = vpMatrix;\n    },\n\n    createEmitter: function(options) {\n      var emitter = phina.particle2dx.EmitterGL(options);\n      this.emitters.push(emitter);\n      emitter.addChildTo(this);\n      emitter.setup(this);\n      emitter.on(\"removed\", function() {\n        this.emitters.erase(emitter);\n      }.bind(this));\n      return emitter;\n    },\n\n    draw: function(canvas) {\n      var gl = this.gl;\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      this._drawParticles();\n      gl.flush();\n\n      var image = this.domElement;\n      canvas.context.drawImage(image,\n        0, 0, image.width, image.height, //\n        -this.width * this.originX, -this.height * this.originY, this.width, this.height //\n      );\n    },\n\n    _drawParticles: function() {\n      for (var i = 0; i < this.emitters.length; i++) {\n        this.emitters[i].render(this);\n      }\n    },\n\n    _static: {\n      defaults: {},\n    },\n  });\n\n});","{\n\t\"startColorAlpha\": 0.34,\n\t\"startParticleSizeVariance\": 2,\n\t\"startColorGreen\": 1,\n\t\"rotatePerSecond\": 0,\n\t\"radialAcceleration\": 0,\n\t\"yCoordFlipped\": -1,\n\t\"emitterType\": 0,\n\t\"blendFuncSource\": 770 ,\n\t\"finishColorVarianceAlpha\": 0,\n\t\"rotationEnd\": 0,\n\t\"startColorVarianceBlue\": 0.2,\n\t\"rotatePerSecondVariance\": 0,\n\t\"particleLifespan\": 0.7,\n\t\"minRadius\": 0,\n\t\"configName\": \"fire\",\n\t\"tangentialAcceleration\": 0,\n\t\"rotationStart\": 0,\n\t\"startColorVarianceGreen\": 0,\n\t\"speed\": 600,\n\t\"minRadiusVariance\": 0,\n\t\"finishColorVarianceBlue\": 0,\n\t\"finishColorBlue\": 0,\n\t\"finishColorGreen\": 0,\n\t\"blendFuncDestination\": 771,\n\t\"finishColorAlpha\": 1,\n\t\"sourcePositionVariancex\": -320,\n\t\"startParticleSize\": 16,\n\t\"sourcePositionVariancey\": -385,\n\t\"startColorRed\": 1,\n\t\"finishColorVarianceRed\": 0,\n\t\"textureFileName\": \"rain.png\",\n\t\"startColorVarianceAlpha\": 0.2,\n\t\"maxParticles\": 218,\n\t\"finishColorVarianceGreen\": 0,\n\t\"finishParticleSize\": 16,\n\t\"duration\": -1,\n\t\"startColorVarianceRed\": 0,\n\t\"finishColorRed\": 0,\n\t\"gravityx\": 0,\n\t\"maxRadiusVariance\": 0,\n\t\"finishParticleSizeVariance\": 0,\n\t\"gravityy\": -40,\n\t\"rotationEndVariance\": 0,\n\t\"startColorBlue\": 1,\n\t\"rotationStartVariance\": 0,\n\t\"speedVariance\": 39,\n\t\"radialAccelVariance\": 0,\n\t\"textureImageData\": \"\",\n\t\"tangentialAccelVariance\": 0,\n\t\"particleLifespanVariance\": 0,\n\t\"angleVariance\": 4,\n\t\"angle\": 109,\n\t\"maxRadius\": 0\n}","�PNG\r\n\u001a\n\u0000\u0000\u0000\rIHDR\u0000\u0000\u0000-\u0000\u0000\u0000-\b\u0006\u0000\u0000\u0000:\u001a�\u0000\u0000\nAiCCPICC Profile\u0000\u0000H\r��wTS�\u0016�Ͻ7��\u0012\" %�\u001az\t �;H\u0015\u0004Q�I�P\u0002��&vD\u0005F\u0014\u0011)VdT�\u0001G�\"cE\u0014\u000b��b�\t�\u0010P��QDE�݌k\t�5�ޚ��Y�����g�}׺\u0000P��\u0004�tX\u0001�4�X\u0014���\\\u0012\u0013���\u0002\u0018\u0010\u0001\u000eX\u0001��ff\u0004G�D\u0002���=���HƳ��.�d��,�P&s���\"7C$\u0006\u0000\nE�6<~&\u0017�\u0002�S��\u00192�\u0004���)2�12\u0016�\t��\"�įl���+�ɘ�&�\u001aY�\u0019�4���Pޚ%ᣌ\u0004�\\�%�g�|\u0007e�TI�\u0000��(����L\u00000\u0014�_��&�l�2E\u0014\u0019��\u0002\u0000\b��9�r\u000e��9h�\u0000x�g�\u0004�Ib�\u0011טi���f��S�b1+��M�xL���\f�0\u0017��o�E\u0001%Ym�h���\u001c��Y��h����\u001e~S�=�z�U�&�ϞA��Y�l�/�\u0016\u0000�$Z�\u001d���U\u0000�m\u0006@��O� \u0000�\u0005\u0000�ޜ�\u001e�l^���\f'\u000b���ls\u0001�k.+�7���oʿ�9�����V;�\u0017?�#I\u00153eE妧�KD��\f\u000e��d��\u0010���9i���,���\u0017��UQ�\t��h��<�X�.d\n���\u00186'\u0007\u0019~�k\u0014hu_\u0000}�9P�I\u0007�o=\u0000C#\u0003$n?z\u0002}�[\u00101\nȾ�h���s�2z���\u001f\u000b\\�n�LA\"S��\f�dr%�,\u0019�߄l�\u0002\u0012�\u0007t�\n4�.0\u0002,`\r\u001c�3p\u0003� \u0000��H\u0010\u0003�\u0003.H\u0002i@\u0004�A>�\u0000\nA1�\u0001v�jp\u0000ԁz�\u0004N�6p\u0006\\\u0004W�\rp\u000b\f�G@\n��K0\u0001ށi\b��\u0010\u0015�A��\u0016�\u000f�B�\u0010\u001bZ\byCAP8\u0014\u0003�C��\u0010�@��&�\u0018*���CP=�#t\u001a�\b]���\u0007� 4\u0006�\u0001}�\u0011�\u0002�a\r�\u0000��ٰ;\u001c\bG���Dx\u0015�\u0007\u0017���J�\u0016>\u000e��\u0017�\u001b�\u0000,�_\b@�\b\u0003�FX\b\u001b�DB�X$\u0001\u0011!k�\"�\u0002�E��\u000e�\u001b��H�q�\u0003\u0006��a�\u0018\u0016�\u0019�Y��bVa�bJ0՘c�VL\u0017�6f\u00103����bձ�X'�?v\t6\u0011��-�V`�`[���\u0003�a�;\u001c\u000e��\u0019�\u001cp~�\u0018\\2n5�\u0004�\u000f׌����\r�&�x�*�\u0014�\u000f�s�b|!�\n\u001c\u001eߏ\u001fƿ'�\tZ\u0004k�\u000f!� $l$T\u0010\u001a\b�\b��\u0011�4Q��Ot\"�\u0010y�\\b)���A�I\u001c&N�\u0014I�$\u0017R$)���TIj\"]&=&�!��:dGr\u0018Y@^O�$� _%\u000f�?P�(&\u0014OJ\u001cEB�N9J�@y@yC�R\r�n�X����ZO�D}J}/G�3���ɭ���k��{%O�חw�_.�'_!J����\u0002Q�@�S���V�F��=�IE���b�b�b�b��5�Q%�����\u0012O�@��%�!\u001aBӥyҸ�M�:�e�0\u001dG7��ӓ���\u001f��\te%e[�(�\u001c�\u001a��R\u0006�0`�3R\u0019��������4�����6�i^��)��*n*|�\"�f�\u0001���LUo�\u0014՝�m�O�0j&jaj�j��.��ϧ�w�ϝ_4����갺�z��j���=�\u001a�\u001a�\u001a\u0019\u001aU\u001a�4�5\u0019�n�ɚ��4ǴhZ\u000b�\u0004Z�Z�^0����Tf%��9�����-�>�ݫ=�c��Xg�N��\u0013]�.[7A�\\�SwBOK/X/_�Q�>Q�����G�[��� �`�A�������a�a��c#����*�Z�;�8c�q��>�[&���I�I��MS���T`�ϴ�\fk�h&4�5�Ǣ��YY�F֠9�<�|�y��+\u000b=�X��\u0016�\u0016_,�,S-�,\u001fY)Y\u0005Xm�����Ěk]c}ǆj�c�Φ�浭�-�v��};�]��\u0016�N���\u000e�\"�&�1\u0007=�x��\u000e��tv(��}�\u0011������\u0007'{'��I�ߝY�)�\rΣ\u000b\f\u0017�\u0017�-\u0018r�q�\u001cr�.d.�_xp��Uە�Z���M׍�v�m���=����+\u000fK\u000f�G�ǔ���\u001a�\u000b^���W�W����b�j�>:>�>�>\u0013�v��}/�a�\u0002�v���������O\u00048\u0004�\t�\n�\u0004F\u0004V\u0007>\u000b2\t\u0012\u0005u\u0004��\u0001���\u001f/�_$\\�\u0016\u0002B�Cv�<\t5\f]\u0015�s\u0018.,4�&�y�Ux~xw\u0004-bEDCĻH����G��\u0016K\u0016wF�G�E�GME{E�EK�X,Y��F�Z� �=\u0016\u001f\u001b\u0015{$vr����K����\n��.3\\����r���Ϯ�_�Yq*\u001e\u001b\u001f\u001d�\u0010��\u0013©�L��_�w�\u0004ד������+��]�e��\u0004�����D��]�cI�I\u0015I�\u0002OA��u�_�䩔���)3�ѩ�i�����B%a��+]3='�/�4�0C��i��U\u0013�@ёL(sYf����L�H�$�%�Y\u000b�j��gGe��Q�\u0011����n�\u001d����~5f5wug�v����5�k\u000e��֮\\۹Nw]������m mH���Fˍe\u001b�n���Q�Q��`h����B�BQ�-�[\u000el�l\u0015l��f��jۗ\"^��b���O%ܒ��Y}W�����������w�v\bw����X�bY^�Ю�]�����W�Va[q`\u000fi�d��2���J�jGէ��\u001a����{�����׿�m�\u0001�\u0003�\u0007>\u001e\u0014\u001c���Pk�Am�a�����꺿g_D�H��G�G��u�;��7�7�6�Ʊ�q�o���C{\u0013��P3���\u00048!9����\u001f�\f<�y�}��'�����Z�Z���։��6i{L{��ӝ\u001d�\u001d-?��|������gKϑ�\u0015��9�w~�Bƅ�\u0017�:Wt>���ҝ����ˁ��^�r�۽��U��g�9];}�}�����\u001e���_�~i��m��p���㭎�\u0005}��]�/���}���\u001b\u0003�\u0006��.�{�^�=�}���\u0007�\u000f^?�z8�h�c��'\nO*��?�����f�����`ϳ�g���C/����O�\u0005ϩ�+F�F�G�Gό���z����ˌ��ㅿ)����ѫ�~w��gb���k��?Jި�9���m�d���wi獵�ޫ�?�����c�Ǒ��O�O���?w|\t��x&mf������2:Y~\u0000\u0000\u0000\tpHYs\u0000\u0000\u000b\u0013\u0000\u0000\u000b\u0013\u0001\u0000��\u0018\u0000\u0000\u0000�IDATX\t�б\r�`\u0010�`@Y���H�e�\u0000�#�8�׸{:}�v�Z�{w��>�琇�7�I��kO#a7i[�������-�~�H�M�\u0016f?i$�&m\u000b��4\u0012v����O\u001a\t�I���'��ݤma��F�nҶ0�I#a7i[�������-��Hi�\u001f�?\u0007d\u00050\u0011w\u0019�\u0000\u0000\u0000\u0000IEND�B`�","�PNG\r\n\u001a\n\u0000\u0000\u0000\rIHDR\u0000\u0000\u0000-\u0000\u0000\u0000-\b\u0006\u0000\u0000\u0000:\u001a�\u0000\u0000\nAiCCPICC Profile\u0000\u0000H\r��wTS�\u0016�Ͻ7��\u0012\" %�\u001az\t �;H\u0015\u0004Q�I�P\u0002��&vD\u0005F\u0014\u0011)VdT�\u0001G�\"cE\u0014\u000b��b�\t�\u0010P��QDE�݌k\t�5�ޚ��Y�����g�}׺\u0000P��\u0004�tX\u0001�4�X\u0014���\\\u0012\u0013���\u0002\u0018\u0010\u0001\u000eX\u0001��ff\u0004G�D\u0002���=���HƳ��.�d��,�P&s���\"7C$\u0006\u0000\nE�6<~&\u0017�\u0002�S��\u00192�\u0004���)2�12\u0016�\t��\"�įl���+�ɘ�&�\u001aY�\u0019�4���Pޚ%ᣌ\u0004�\\�%�g�|\u0007e�TI�\u0000��(����L\u00000\u0014�_��&�l�2E\u0014\u0019��\u0002\u0000\b��9�r\u000e��9h�\u0000x�g�\u0004�Ib�\u0011טi���f��S�b1+��M�xL���\f�0\u0017��o�E\u0001%Ym�h���\u001c��Y��h����\u001e~S�=�z�U�&�ϞA��Y�l�/�\u0016\u0000�$Z�\u001d���U\u0000�m\u0006@��O� \u0000�\u0005\u0000�ޜ�\u001e�l^���\f'\u000b���ls\u0001�k.+�7���oʿ�9�����V;�\u0017?�#I\u00153eE妧�KD��\f\u000e��d��\u0010���9i���,���\u0017��UQ�\t��h��<�X�.d\n���\u00186'\u0007\u0019~�k\u0014hu_\u0000}�9P�I\u0007�o=\u0000C#\u0003$n?z\u0002}�[\u00101\nȾ�h���s�2z���\u001f\u000b\\�n�LA\"S��\f�dr%�,\u0019�߄l�\u0002\u0012�\u0007t�\n4�.0\u0002,`\r\u001c�3p\u0003� \u0000��H\u0010\u0003�\u0003.H\u0002i@\u0004�A>�\u0000\nA1�\u0001v�jp\u0000ԁz�\u0004N�6p\u0006\\\u0004W�\rp\u000b\f�G@\n��K0\u0001ށi\b��\u0010\u0015�A��\u0016�\u000f�B�\u0010\u001bZ\byCAP8\u0014\u0003�C��\u0010�@��&�\u0018*���CP=�#t\u001a�\b]���\u0007� 4\u0006�\u0001}�\u0011�\u0002�a\r�\u0000��ٰ;\u001c\bG���Dx\u0015�\u0007\u0017���J�\u0016>\u000e��\u0017�\u001b�\u0000,�_\b@�\b\u0003�FX\b\u001b�DB�X$\u0001\u0011!k�\"�\u0002�E��\u000e�\u001b��H�q�\u0003\u0006��a�\u0018\u0016�\u0019�Y��bVa�bJ0՘c�VL\u0017�6f\u00103����bձ�X'�?v\t6\u0011��-�V`�`[���\u0003�a�;\u001c\u000e��\u0019�\u001cp~�\u0018\\2n5�\u0004�\u000f׌����\r�&�x�*�\u0014�\u000f�s�b|!�\n\u001c\u001eߏ\u001fƿ'�\tZ\u0004k�\u000f!� $l$T\u0010\u001a\b�\b��\u0011�4Q��Ot\"�\u0010y�\\b)���A�I\u001c&N�\u0014I�$\u0017R$)���TIj\"]&=&�!��:dGr\u0018Y@^O�$� _%\u000f�?P�(&\u0014OJ\u001cEB�N9J�@y@yC�R\r�n�X����ZO�D}J}/G�3���ɭ���k��{%O�חw�_.�'_!J����\u0002Q�@�S���V�F��=�IE���b�b�b�b��5�Q%�����\u0012O�@��%�!\u001aBӥyҸ�M�:�e�0\u001dG7��ӓ���\u001f��\te%e[�(�\u001c�\u001a��R\u0006�0`�3R\u0019��������4�����6�i^��)��*n*|�\"�f�\u0001���LUo�\u0014՝�m�O�0j&jaj�j��.��ϧ�w�ϝ_4����갺�z��j���=�\u001a�\u001a�\u001a\u0019\u001aU\u001a�4�5\u0019�n�ɚ��4ǴhZ\u000b�\u0004Z�Z�^0����Tf%��9�����-�>�ݫ=�c��Xg�N��\u0013]�.[7A�\\�SwBOK/X/_�Q�>Q�����G�[��� �`�A�������a�a��c#����*�Z�;�8c�q��>�[&���I�I��MS���T`�ϴ�\fk�h&4�5�Ǣ��YY�F֠9�<�|�y��+\u000b=�X��\u0016�\u0016_,�,S-�,\u001fY)Y\u0005Xm�����Ěk]c}ǆj�c�Φ�浭�-�v��};�]��\u0016�N���\u000e�\"�&�1\u0007=�x��\u000e��tv(��}�\u0011������\u0007'{'��I�ߝY�)�\rΣ\u000b\f\u0017�\u0017�-\u0018r�q�\u001cr�.d.�_xp��Uە�Z���M׍�v�m���=����+\u000fK\u000f�G�ǔ���\u001a�\u000b^���W�W����b�j�>:>�>�>\u0013�v��}/�a�\u0002�v���������O\u00048\u0004�\t�\n�\u0004F\u0004V\u0007>\u000b2\t\u0012\u0005u\u0004��\u0001���\u001f/�_$\\�\u0016\u0002B�Cv�<\t5\f]\u0015�s\u0018.,4�&�y�Ux~xw\u0004-bEDCĻH����G��\u0016K\u0016wF�G�E�GME{E�EK�X,Y��F�Z� �=\u0016\u001f\u001b\u0015{$vr����K����\n��.3\\����r���Ϯ�_�Yq*\u001e\u001b\u001f\u001d�\u0010��\u0013©�L��_�w�\u0004ד������+��]�e��\u0004�����D��]�cI�I\u0015I�\u0002OA��u�_�䩔���)3�ѩ�i�����B%a��+]3='�/�4�0C��i��U\u0013�@ёL(sYf����L�H�$�%�Y\u000b�j��gGe��Q�\u0011����n�\u001d����~5f5wug�v����5�k\u000e��֮\\۹Nw]������m mH���Fˍe\u001b�n���Q�Q��`h����B�BQ�-�[\u000el�l\u0015l��f��jۗ\"^��b���O%ܒ��Y}W�����������w�v\bw����X�bY^�Ю�]�����W�Va[q`\u000fi�d��2���J�jGէ��\u001a����{�����׿�m�\u0001�\u0003�\u0007>\u001e\u0014\u001c���Pk�Am�a�����꺿g_D�H��G�G��u�;��7�7�6�Ʊ�q�o���C{\u0013��P3���\u00048!9����\u001f�\f<�y�}��'�����Z�Z���։��6i{L{��ӝ\u001d�\u001d-?��|������gKϑ�\u0015��9�w~�Bƅ�\u0017�:Wt>���ҝ����ˁ��^�r�۽��U��g�9];}�}�����\u001e���_�~i��m��p���㭎�\u0005}��]�/���}���\u001b\u0003�\u0006��.�{�^�=�}���\u0007�\u000f^?�z8�h�c��'\nO*��?�����f�����`ϳ�g���C/����O�\u0005ϩ�+F�F�G�Gό���z����ˌ��ㅿ)����ѫ�~w��gb���k��?Jި�9���m�d���wi獵�ޫ�?�����c�Ǒ��O�O���?w|\t��x&mf������2:Y~\u0000\u0000\u0000\tpHYs\u0000\u0000\u000b\u0013\u0000\u0000\u000b\u0013\u0001\u0000��\u0018\u0000\u0000\u0000�IDATX\t�б\r�`\u0010�`@Y���H�e�\u0000�#�8�׸{:}�v�Z�{w��>�琇�7�I��kO#a7i[�������-�~�H�M�\u0016f?i$�&m\u000b��4\u0012v����O\u001a\t�I���'��ݤma��F�nҶ0�I#a7i[�������-��Hi�\u001f�?\u0007d\u00050\u0011w\u0019�\u0000\u0000\u0000\u0000IEND�B`�","phina.namespace(() => {\r\n\r\n  phina.define(\"Add\", {\r\n    superClass: \"PostProcessingPass\",\r\n\r\n    weight: null,\r\n\r\n    init: function (gl, w, h) {\r\n      this.superInit();\r\n      this.framebuffer = this.createFramebuffer(gl, w, h);\r\n      this.drawable = this.createDrawable(gl, \"add.fs\", [\"srcTextureA\", \"srcTextureB\"]);\r\n      this.weight = [1, 1];\r\n    },\r\n\r\n    setWeight: function (a, b) {\r\n      this.weight[0] = a;\r\n      this.weight[1] = b;\r\n    },\r\n\r\n    render: function (gl, previousTextureA, previousTextureB) {\r\n      if (!this.isEnd) {\r\n        this.framebuffer.bind(gl);\r\n      } else {\r\n        phigl.Framebuffer.unbind(gl);\r\n      }\r\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n      gl.enable(gl.BLEND);\r\n      gl.blendFunc(gl.ONE, gl.ONE);\r\n      this.drawable.uniforms[\"srcTextureA\"].setValue(0).setTexture(previousTextureA);\r\n      this.drawable.uniforms[\"srcTextureB\"].setValue(1).setTexture(previousTextureB);\r\n      this.drawable.uniforms[\"weight\"].setValue(this.weight);\r\n      this.drawable.draw();\r\n      phigl.Framebuffer.unbind(gl);\r\n\r\n      this.flare(\"postrender\", { gl, previousTexture: this.framebuffer.texture });\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"Blur\", {\r\n    superClass: \"PostProcessingPass\",\r\n\r\n    init: function (gl, w, h) {\r\n      this.superInit();\r\n      this.framebuffer = this.createFramebuffer(gl, w, h);\r\n      this.drawable = this.createDrawable(gl, \"blur.fs\", [\"srcTexture\"]);\r\n      this.direction = [0, 0];\r\n    },\r\n\r\n    setDirection: function (h, v) {\r\n      this.direction[0] = h;\r\n      this.direction[1] = v;\r\n    },\r\n\r\n    render: function (gl, previousTexture) {\r\n      if (!this.isEnd) {\r\n        this.framebuffer.bind(gl);\r\n      } else {\r\n        phigl.Framebuffer.unbind(gl);\r\n      }\r\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n      this.drawable.uniforms[\"srcTexture\"].setValue(0).setTexture(previousTexture);\r\n      this.drawable.uniforms[\"direction\"].setValue(this.direction);\r\n      this.drawable.draw();\r\n      phigl.Framebuffer.unbind(gl);\r\n\r\n      this.flare(\"postrender\", { gl, previousTexture: this.framebuffer.texture });\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"Emission\", {\r\n    superClass: \"PostProcessingPass\",\r\n\r\n    next2: null,\r\n\r\n    init: function (gl, w, h) {\r\n      this.superInit();\r\n\r\n      this.dark = Lighting();\r\n\r\n      this.framebuffer = this.createFramebuffer(gl, w, h);\r\n      this.drawable = this.createDrawable(gl);\r\n    },\r\n\r\n    setRenderer: function (renderer) {\r\n      renderer.on(\"postrender\", ({ gl, scene }) => {\r\n        this.render(gl, scene, renderer);\r\n      });\r\n    },\r\n\r\n    render: function (gl, scene, renderer) {\r\n      const bkup = renderer.lighting;\r\n      renderer.lighting = this.dark;\r\n\r\n      if (!this.isEnd) {\r\n        this.framebuffer.bind(gl);\r\n      } else {\r\n        phigl.Framebuffer.unbind(gl);\r\n      }\r\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n      for (let name in renderer.spriteArrays) {\r\n        const array = renderer.spriteArrays[name];\r\n        array.draw(gl, renderer.lighting);\r\n      }\r\n      renderer.renderChildren(scene);\r\n      renderer.lighting = bkup;\r\n\r\n      phigl.Framebuffer.unbind(gl);\r\n\r\n      this.flare(\"postrender\", { gl, previousTexture: this.framebuffer.texture });\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"Merge\", {\r\n    superClass: \"EventDispatcher\",\r\n\r\n    init: function () {\r\n      this.superInit();\r\n    },\r\n\r\n    merge: function (passA, passB) {\r\n      let count = 0;\r\n      passA.on(\"postrender\", ({ gl }) => {\r\n        count += 1;\r\n        if (count == 2) {\r\n          this.flare(\"postrender\", {\r\n            gl,\r\n            previousTextureA: passA.framebuffer.texture,\r\n            previousTextureB: passB.framebuffer.texture,\r\n          });\r\n          count = 0;\r\n        }\r\n      });\r\n      passB.on(\"postrender\", ({ gl }) => {\r\n        count += 1;\r\n        if (count == 2) {\r\n          this.flare(\"postrender\", {\r\n            gl,\r\n            previousTextureA: passA.framebuffer.texture,\r\n            previousTextureB: passB.framebuffer.texture,\r\n          });\r\n          count = 0;\r\n        }\r\n      });\r\n      return this;\r\n    },\r\n\r\n    setNext: function (next) {\r\n      this.on(\"postrender\", ({ gl, previousTextureA, previousTextureB }) => {\r\n        next.render(gl, previousTextureA, previousTextureB);\r\n      });\r\n      return next;\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"PostProcessingPass\", {\r\n    superClass: \"phina.util.EventDispatcher\",\r\n\r\n    enabled: false,\r\n    isEnd: false,\r\n\r\n    framebuffer: null,\r\n\r\n    init: function () {\r\n      this.superInit();\r\n    },\r\n\r\n    createFramebuffer: function (gl, w, h) {\r\n      return phigl.Framebuffer(gl, w, h);\r\n    },\r\n    createDrawable: function (gl, fragmentShader = \"passthrough.fs\", uniforms = [\"srcTexture\"]) {\r\n      const program = phigl.Program(gl)\r\n        .attach(\"postprocessing.vs\")\r\n        .attach(fragmentShader)\r\n        .link();\r\n      return phigl.Drawable(gl)\r\n        .setProgram(program)\r\n        .setIndexValues([0, 1, 2, 1, 3, 2])\r\n        .declareAttributes(\"position\", \"uv\")\r\n        .setAttributeDataArray([{\r\n          unitSize: 2,\r\n          data: [\r\n            -1, 1,\r\n            1, 1,\r\n            -1, -1,\r\n            1, -1,\r\n          ]\r\n        }, {\r\n          unitSize: 2,\r\n          data: [\r\n            0, 1,\r\n            1, 1,\r\n            0, 0,\r\n            1, 0,\r\n          ],\r\n        },])\r\n        .createVao()\r\n        .declareUniforms(...uniforms);\r\n    },\r\n\r\n    render: function (gl, previousTexture) {\r\n      this.flare(\"postrender\", { gl, previousTexture });\r\n    },\r\n\r\n    setEnabled: function (v) {\r\n      this.enabled = v;\r\n      return this;\r\n    },\r\n\r\n    setNext: function (next) {\r\n      this.on(\"postrender\", ({ gl, previousTexture }) => {\r\n        next.render(gl, previousTexture);\r\n      });\r\n      return next;\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"StartPass\", {\r\n    superClass: \"PostProcessingPass\",\r\n\r\n    init: function (gl, w, h) {\r\n      this.superInit();\r\n      this.framebuffer = this.createFramebuffer(gl, w, h);\r\n    },\r\n\r\n    setRenderer: function (renderer) {\r\n      renderer.on(\"prerender\", ({ gl }) => {\r\n        this.framebuffer.bind(gl);\r\n      });\r\n      renderer.on(\"postrender\", ({ gl, scene }) => {\r\n        phigl.Framebuffer.unbind(gl);\r\n        this.flare(\"postrender\", { gl, previousTexture: this.framebuffer.texture });\r\n      });\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\r\n\r\n  phina.define(\"Stage1\", {\r\n    superClass: \"StageSequencer\",\r\n\r\n    init: function () {\r\n      this.superInit()\r\n    },\r\n\r\n    gen: function* () {\r\n      let R = Random(12345);\r\n      let cp = 0;\r\n      let a = 0;\r\n\r\n      this.changeScroll(0, 0.5, 1);\r\n      yield 2000;\r\n\r\n      cp += 1;\r\n      if (this.checkPoint < cp) {\r\n        console.log(\"area \" + cp);\r\n        a = (30).toRadian();\r\n        for (let i = 0; i < 5; i++) {\r\n          const pos0 = PositionHelper.rotate(-50 * i, -25, a);\r\n          this.launchEnemy(\"TankSmall\", { bulletml: \"zako\", wait: 0, direction: a }, -300 + pos0, -100 + pos0, false);\r\n          const pos1 = PositionHelper.rotate(-50 * i, 25, a);\r\n          this.launchEnemy(\"TankSmall\", { bulletml: \"zako\", wait: 0, direction: a }, -300 + pos1, -100 + pos1, false);\r\n        }\r\n        a = (170).toRadian();\r\n        for (let i = 0; i < 5; i++) {\r\n          this.launchEnemy(\"TankSmall\", { bulletml: \"zako\", wait: 200, direction: a }, 400 + Math.cos(a) * -50 * i, -200 + Math.sin(a) * -50 * i, false);\r\n        }\r\n        yield 1500;\r\n        for (let i = 0; i < 3; i++) {\r\n          this.launchEnemy(\"Zako1\", { bulletml: \"zako\", wait: i * 100 }, -150 + R.randint(-3, 3) * 20, -150 + R.randint(-3, 3) * 20);\r\n        }\r\n        yield 1500;\r\n        for (let i = 0; i < 3; i++) {\r\n          this.launchEnemy(\"Zako1\", { bulletml: \"zako\", wait: i * 100 }, 150 + R.randint(-3, 3) * 20, -150 + R.randint(-3, 3) * 20);\r\n        }\r\n        yield 1500;\r\n        for (let i = 0; i < 3; i++) {\r\n          this.launchEnemy(\"Zako1\", { bulletml: \"zako\", wait: i * 100 }, -150 + R.randint(-3, 3) * 20, -150 + R.randint(-3, 3) * 20);\r\n          this.launchEnemy(\"Zako1\", { bulletml: \"zako\", wait: i * 100 }, 150 + R.randint(-3, 3) * 20, -150 + R.randint(-3, 3) * 20);\r\n        }\r\n\r\n        while (this.enemies.some(e => e.parent)) yield 10;\r\n        this.flare(\"checkpoint\");\r\n      }\r\n\r\n      cp += 1;\r\n      if (this.checkPoint < cp) {\r\n        console.log(\"area \" + cp);\r\n        a = (-180).toRadian();\r\n        for (let i = 0; i < 5; i++) {\r\n          this.launchEnemy(\"TankSmall\", { bulletml: \"zako\", wait: 0, direction: a }, 300 + Math.cos(a) * -50 * i, -100 + Math.sin(a) * -50 * i, false);\r\n        }\r\n        a = (-20).toRadian();\r\n        for (let i = 0; i < 5; i++) {\r\n          this.launchEnemy(\"TankSmall\", { bulletml: \"zako\", wait: 0, direction: a }, -300 + Math.cos(a) * -50 * i, 500 + Math.sin(a) * -50 * i, false);\r\n        }\r\n        a = (90).toRadian();\r\n        for (let i = 0; i < 5; i++) {\r\n          this.launchEnemy(\"TankSmall\", { bulletml: \"zako\", wait: 0, direction: a }, 20 + Math.cos(a) * -50 * i, -140 + Math.sin(a) * -50 * i, false);\r\n        }\r\n        yield 1500;\r\n        for (let i = 0; i < 10; i++) {\r\n          this.launchEnemy(\"Zako1\", { bulletml: \"zako\", wait: i * 100 }, -150 + R.randint(-3, 3) * 20, -150 + R.randint(-3, 3) * 20);\r\n          this.launchEnemy(\"Zako1\", { bulletml: \"zako\", wait: i * 100 }, 150 + R.randint(-3, 3) * 20, -150 + R.randint(-3, 3) * 20);\r\n        }\r\n\r\n        while (this.enemies.some(e => e.parent)) yield 10;\r\n        this.flare(\"checkpoint\");\r\n      }\r\n\r\n      cp += 1;\r\n      if (this.checkPoint < cp) {\r\n        console.log(\"area \" + cp);\r\n        yield 1500;\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 0 }, -100, -100);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 100 }, -150, -180);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 200 }, -80, -140);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 300 }, 100, -100);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 400 }, 150, -180);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 500 }, 80, -140);\r\n\r\n        yield 1500;\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 0 }, -100, -100);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 100 }, -150, -180);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 200 }, -80, -140);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 300 }, 100, -100);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 400 }, 150, -180);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 500 }, 80, -140);\r\n\r\n        yield 1500;\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 0 }, -100, -100);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 100 }, -150, -180);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 200 }, -80, -140);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 300 }, 100, -100);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 400 }, 150, -180);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 500 }, 80, -140);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 600 }, -100, -100);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 700 }, -150, -180);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 800 }, -80, -140);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 900 }, 100, -100);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 1000 }, 150, -180);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 1100 }, 80, -140);\r\n\r\n        while (this.enemies.some(e => e.parent)) yield 10;\r\n        this.flare(\"checkpoint\");\r\n      }\r\n\r\n      cp += 1;\r\n      if (this.checkPoint < cp) {\r\n        console.log(\"area \" + cp);\r\n        yield 1500;\r\n\r\n        this.launchEnemy(\"Middle1\", { bulletml: \"middle1\", wait: 0, toX: -30 }, 0, -100);\r\n        this.launchEnemy(\"Middle1\", { bulletml: \"middle1\", wait: 600, toX: 60 }, 0, -100);\r\n        this.launchEnemy(\"Middle1\", { bulletml: \"middle1\", wait: 1200, toX: -180 }, 0, -100);\r\n        this.launchEnemy(\"Middle1\", { bulletml: \"middle1\", wait: 1800, toX: 150 }, 0, -100);\r\n\r\n        while (this.enemies.some(e => e.parent)) yield 10;\r\n        this.flare(\"checkpoint\");\r\n      }\r\n\r\n      cp += 1;\r\n      if (this.checkPoint < cp) {\r\n        console.log(\"area \" + cp);\r\n        yield 1500;\r\n\r\n        this.launchEnemy(\"Middle1\", { bulletml: \"middle1\", wait: 0, toX: -250 }, 0, -100);\r\n        this.launchEnemy(\"Middle1\", { bulletml: \"middle1\", wait: 0, toX: 250 }, 0, -100);\r\n        this.launchEnemy(\"Middle1\", { bulletml: \"middle1\", wait: 1200, toX: -250 }, 0, -100);\r\n        this.launchEnemy(\"Middle1\", { bulletml: \"middle1\", wait: 1200, toX: 250 }, 0, -100);\r\n        this.launchEnemy(\"Middle1\", { bulletml: \"middle1\", wait: 1800, toX: -250 }, 0, -100);\r\n        this.launchEnemy(\"Middle1\", { bulletml: \"middle1\", wait: 1800, toX: 250 }, 0, -100);\r\n\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 0 }, -100, -100);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 100 }, -150, -180);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 200 }, -80, -140);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 300 }, 100, -100);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 400 }, 150, -180);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 500 }, 80, -140);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 600 }, -100, -100);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 700 }, -150, -180);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 800 }, -80, -140);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 900 }, 100, -100);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 1000 }, 150, -180);\r\n        this.launchEnemy(\"Zako2\", { bulletml: \"zako\", wait: 1100 }, 80, -140);\r\n\r\n        while (this.enemies.some(e => e.parent)) yield 10;\r\n        this.flare(\"checkpoint\");\r\n      }\r\n    },\r\n\r\n  });\r\n\r\n});\r\n"]}