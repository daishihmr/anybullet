{"version":3,"file":"daicol.js","sources":["../src/LinearQuadTreeSpace.js","../src/walk.js"],"sourcesContent":["// 線形四分木空間。\r\n// 空間階層のことをレベル、\r\n// 各小空間のことをセルと呼ぶことにする。\r\nclass LinearQuadTreeSpace {\r\n  constructor(width, height, level) {\r\n    this._width = width;\r\n    this._height = height;\r\n    this.data = [null];\r\n    this._currentLevel = 0;\r\n\r\n    // 入力レベルまでdataを伸長する。\r\n    while (this._currentLevel < level) {\r\n      this._expand();\r\n    }\r\n  }\r\n\r\n  // dataをクリアする。\r\n  clear() {\r\n    this.data.fill(null);\r\n  }\r\n\r\n  // 要素をdataに追加する。\r\n  // 必要なのは、要素と、レベルと、レベル内での番号。\r\n  _addNode(node, level, index) {\r\n    // オフセットは(4^L - 1)/3で求まる。\r\n    // それにindexを足せば線形四分木上での位置が出る。\r\n    const offset = ((4 ** level) - 1) / 3;\r\n    const linearIndex = offset + index;\r\n\r\n    // もしdataの長さが足りないなら拡張する。\r\n    while (this.data.length <= linearIndex) {\r\n      this._expandData();\r\n    }\r\n\r\n    // セルの初期値はnullとする。\r\n    // しかし上の階層がnullのままだと面倒が発生する。\r\n    // なので要素を追加する前に親やその先祖すべてを\r\n    // 空配列で初期化する。\r\n    let parentCellIndex = linearIndex;\r\n    while (this.data[parentCellIndex] === null) {\r\n      this.data[parentCellIndex] = [];\r\n\r\n      parentCellIndex = Math.floor((parentCellIndex - 1) / 4);\r\n      if (parentCellIndex >= this.data.length) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // セルに要素を追加する。\r\n    const cell = this.data[linearIndex];\r\n    cell.push(node);\r\n  }\r\n\r\n  // Actorを線形四分木に追加する。\r\n  // Actorのコリジョンからモートン番号を計算し、\r\n  // 適切なセルに割り当てる。\r\n  addActor(actor) {\r\n    // モートン番号の計算。\r\n    const leftTopMorton = this._calc2DMortonNumber(actor.left, actor.top);\r\n    const rightBottomMorton = this._calc2DMortonNumber(actor.right, actor.bottom);\r\n\r\n    // 左上も右下も-1（画面外）であるならば、\r\n    // レベル0として扱う。\r\n    // なおこの処理には気をつける必要があり、\r\n    // 画面外に大量のオブジェクトがあるとレベル0に\r\n    // オブジェクトが大量配置され、当たり判定に大幅な処理時間がかかる。\r\n    // 実用の際にはここをうまく書き換えて、あまり負担のかからない\r\n    // 処理に置き換えるといい。\r\n    if (leftTopMorton === -1 && rightBottomMorton === -1) {\r\n      this._addNode(actor, 0, 0);\r\n      return;\r\n    }\r\n\r\n    // 左上と右下が同じ番号に所属していたら、\r\n    // それはひとつのセルに収まっているということなので、\r\n    // 特に計算もせずそのまま現在のレベルのセルに入れる。\r\n    if (leftTopMorton === rightBottomMorton) {\r\n      this._addNode(actor, this._currentLevel, leftTopMorton);\r\n      return;\r\n    }\r\n\r\n    // 左上と右下が異なる番号（＝境界をまたいでいる）の場合、\r\n    // 所属するレベルを計算する。\r\n    const level = this._calcLevel(leftTopMorton, rightBottomMorton);\r\n\r\n    // そのレベルでの所属する番号を計算する。\r\n    // モートン番号の代表値として大きい方を採用する。\r\n    // これは片方が-1の場合、-1でない方を採用したいため。\r\n    const larger = Math.max(leftTopMorton, rightBottomMorton);\r\n    const cellNumber = this._calcCell(larger, level);\r\n\r\n    // 線形四分木に追加する。\r\n    this._addNode(actor, level, cellNumber);\r\n  }\r\n\r\n  calcLevel(actor) {\r\n    const leftTopMorton = this._calc2DMortonNumber(actor.left, actor.top);\r\n    const rightBottomMorton = this._calc2DMortonNumber(actor.right, actor.bottom);\r\n\r\n    if (leftTopMorton === -1 && rightBottomMorton === -1) {\r\n      return 0;\r\n    } else if (leftTopMorton === rightBottomMorton) {\r\n      return this._currentLevel;\r\n    } else {\r\n      return this._calcLevel(leftTopMorton, rightBottomMorton);\r\n    }\r\n  }\r\n\r\n  // 線形四分木の長さを伸ばす。\r\n  _expand() {\r\n    const nextLevel = this._currentLevel + 1;\r\n    const length = ((4 ** (nextLevel + 1)) - 1) / 3;\r\n\r\n    while (this.data.length < length) {\r\n      this.data.push(null);\r\n    }\r\n\r\n    this._currentLevel++;\r\n  }\r\n\r\n  // 16bitの数値を1bit飛ばしの32bitにする。\r\n  _separateBit32(n) {\r\n    n = (n | (n << 8)) & 0x00ff00ff;\r\n    n = (n | (n << 4)) & 0x0f0f0f0f;\r\n    n = (n | (n << 2)) & 0x33333333;\r\n    return (n | (n << 1)) & 0x55555555;\r\n  }\r\n\r\n  // x, y座標からモートン番号を算出する。\r\n  _calc2DMortonNumber(x, y) {\r\n    // 空間の外の場合-1を返す。\r\n    if (x < 0 || y < 0) {\r\n      return -1;\r\n    }\r\n\r\n    if (x > this._width || y > this._height) {\r\n      return -1;\r\n    }\r\n\r\n    // 空間の中の位置を求める。\r\n    const xCell = Math.floor(x / (this._width / (2 ** this._currentLevel)));\r\n    const yCell = Math.floor(y / (this._height / (2 ** this._currentLevel)));\r\n\r\n    // x位置とy位置をそれぞれ1bit飛ばしの数にし、\r\n    // それらをあわせてひとつの数にする。\r\n    // これがモートン番号となる。\r\n    return (this._separateBit32(xCell) | (this._separateBit32(yCell) << 1));\r\n  }\r\n\r\n  // オブジェクトの所属レベルを算出する。\r\n  // XORを取った数を2bitずつ右シフトして、\r\n  // 0でない数が捨てられたときのシフト回数を採用する。\r\n  _calcLevel(leftTopMorton, rightBottomMorton) {\r\n    const xorMorton = leftTopMorton ^ rightBottomMorton;\r\n    let level = this._currentLevel - 1;\r\n    let attachedLevel = this._currentLevel;\r\n\r\n    for (let i = 0; level >= 0; i++) {\r\n      const flag = (xorMorton >> (i * 2)) & 0x3;\r\n      if (flag > 0) {\r\n        attachedLevel = level;\r\n      }\r\n\r\n      level--;\r\n    }\r\n\r\n    return attachedLevel;\r\n  }\r\n\r\n  // 階層を求めるときにシフトした数だけ右シフトすれば\r\n  // 空間の位置がわかる。\r\n  _calcCell(morton, level) {\r\n    const shift = ((this._currentLevel - level) * 2);\r\n    return morton >> shift;\r\n  }\r\n}\r\n\r\nexport { LinearQuadTreeSpace };","const hitTest = (treeA, treeB, hitTestFunc, currentIndex = 0, objList = []) => {\r\n  const cellA = treeA.data[currentIndex];\r\n  const cellB = treeB.data[currentIndex];\r\n\r\n  if (cellB === null) return;\r\n\r\n  // 現在のセルの中と、衝突オブジェクトリストとで\r\n  // 当たり判定を取る。\r\n  if (cellA !== null) {\r\n    _hitTestInCell(hitTestFunc, cellA, cellB, objList);\r\n  }\r\n\r\n  // 次に下位セルを持つか調べる。\r\n  // 下位セルは最大4個なので、i=0から3の決め打ちで良い。\r\n  let hasChildren = false;\r\n  for (let i = 0; i < 4; i++) {\r\n    const nextIndex = currentIndex * 4 + 1 + i;\r\n\r\n    // 下位セルがあったら、\r\n    const hasChildCell = (nextIndex < treeB.data.length) && (treeB.data[nextIndex] !== null);\r\n    hasChildren = hasChildren || hasChildCell;\r\n    if (hasChildCell) {\r\n      // 衝突オブジェクトリストにpushして、\r\n      objList.push(...cellB);\r\n      // 下位セルで当たり判定を取る。再帰。\r\n      hitTest(treeA, treeB, hitTestFunc, nextIndex, objList);\r\n    }\r\n  }\r\n\r\n  // 終わったら追加したオブジェクトをpopする。\r\n  if (hasChildren) {\r\n    const popNum = cellB.length;\r\n    for (let i = 0; i < popNum; i++) {\r\n      objList.pop();\r\n    }\r\n  }\r\n};\r\n\r\n// セルの中の当たり判定を取る。\r\n// 衝突オブジェクトリストとも取る。\r\nconst _hitTestInCell = (hitTestFunc, cellA, cellB, objList) => {\r\n  // セルの中。総当たり。\r\n  for (let i = 0, il = cellA.length; i < il; i++) {\r\n    const objA = cellA[i];\r\n    for (let j = 0, jl = cellB.length; j < jl; j++) {\r\n      const objB = cellB[j];\r\n\r\n      hitTestFunc(objA, objB);\r\n    }\r\n  }\r\n\r\n  // 衝突オブジェクトリストと。\r\n  for (let i = 0, il = objList.length; i < il; i++) {\r\n    const objB = objList[i];\r\n    for (let j = 0, jl = cellA.length; j < jl; j++) {\r\n      const objA = cellA[j];\r\n\r\n      hitTestFunc(objA, objB);\r\n    }\r\n  }\r\n};\r\n\r\nexport { hitTest };"],"names":[],"mappings":";;;;;;CAAA;CACA;CACA;CACA,MAAM,mBAAmB,CAAC;CAC1B,EAAE,WAAW,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE;CACpC,IAAI,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;CACxB,IAAI,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;CAC1B,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;CACvB,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;;CAE3B;CACA,IAAI,OAAO,IAAI,CAAC,aAAa,GAAG,KAAK,EAAE;CACvC,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;CACrB,KAAK;CACL,GAAG;;CAEH;CACA,EAAE,KAAK,GAAG;CACV,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;CACzB,GAAG;;CAEH;CACA;CACA,EAAE,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE;CAC/B;CACA;CACA,IAAI,MAAM,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,CAAC;CAC1C,IAAI,MAAM,WAAW,GAAG,MAAM,GAAG,KAAK,CAAC;;CAEvC;CACA,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,WAAW,EAAE;CAC5C,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;CACzB,KAAK;;CAEL;CACA;CACA;CACA;CACA,IAAI,IAAI,eAAe,GAAG,WAAW,CAAC;CACtC,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,IAAI,EAAE;CAChD,MAAM,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC;;CAEtC,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,eAAe,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;CAC9D,MAAM,IAAI,eAAe,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;CAC/C,QAAQ,MAAM;CACd,OAAO;CACP,KAAK;;CAEL;CACA,IAAI,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;CACxC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;CACpB,GAAG;;CAEH;CACA;CACA;CACA,EAAE,QAAQ,CAAC,KAAK,EAAE;CAClB;CACA,IAAI,MAAM,aAAa,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;CAC1E,IAAI,MAAM,iBAAiB,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;;CAElF;CACA;CACA;CACA;CACA;CACA;CACA;CACA,IAAI,IAAI,aAAa,KAAK,CAAC,CAAC,IAAI,iBAAiB,KAAK,CAAC,CAAC,EAAE;CAC1D,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;CACjC,MAAM,OAAO;CACb,KAAK;;CAEL;CACA;CACA;CACA,IAAI,IAAI,aAAa,KAAK,iBAAiB,EAAE;CAC7C,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;CAC9D,MAAM,OAAO;CACb,KAAK;;CAEL;CACA;CACA,IAAI,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAC;;CAEpE;CACA;CACA;CACA,IAAI,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAC;CAC9D,IAAI,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;;CAErD;CACA,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;CAC5C,GAAG;;CAEH,EAAE,SAAS,CAAC,KAAK,EAAE;CACnB,IAAI,MAAM,aAAa,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;CAC1E,IAAI,MAAM,iBAAiB,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;;CAElF,IAAI,IAAI,aAAa,KAAK,CAAC,CAAC,IAAI,iBAAiB,KAAK,CAAC,CAAC,EAAE;CAC1D,MAAM,OAAO,CAAC,CAAC;CACf,KAAK,MAAM,IAAI,aAAa,KAAK,iBAAiB,EAAE;CACpD,MAAM,OAAO,IAAI,CAAC,aAAa,CAAC;CAChC,KAAK,MAAM;CACX,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAC;CAC/D,KAAK;CACL,GAAG;;CAEH;CACA,EAAE,OAAO,GAAG;CACZ,IAAI,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;CAC7C,IAAI,MAAM,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;CAEpD,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,EAAE;CACtC,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;CAC3B,KAAK;;CAEL,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;CACzB,GAAG;;CAEH;CACA,EAAE,cAAc,CAAC,CAAC,EAAE;CACpB,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,UAAU,CAAC;CACpC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,UAAU,CAAC;CACpC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,UAAU,CAAC;CACpC,IAAI,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,UAAU,CAAC;CACvC,GAAG;;CAEH;CACA,EAAE,mBAAmB,CAAC,CAAC,EAAE,CAAC,EAAE;CAC5B;CACA,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;CACxB,MAAM,OAAO,CAAC,CAAC,CAAC;CAChB,KAAK;;CAEL,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE;CAC7C,MAAM,OAAO,CAAC,CAAC,CAAC;CAChB,KAAK;;CAEL;CACA,IAAI,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;CAC5E,IAAI,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;;CAE7E;CACA;CACA;CACA,IAAI,QAAQ,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE;CAC5E,GAAG;;CAEH;CACA;CACA;CACA,EAAE,UAAU,CAAC,aAAa,EAAE,iBAAiB,EAAE;CAC/C,IAAI,MAAM,SAAS,GAAG,aAAa,GAAG,iBAAiB,CAAC;CACxD,IAAI,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;CACvC,IAAI,IAAI,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;;CAE3C,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;CACrC,MAAM,MAAM,IAAI,GAAG,CAAC,SAAS,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC;CAChD,MAAM,IAAI,IAAI,GAAG,CAAC,EAAE;CACpB,QAAQ,aAAa,GAAG,KAAK,CAAC;CAC9B,OAAO;;CAEP,MAAM,KAAK,EAAE,CAAC;CACd,KAAK;;CAEL,IAAI,OAAO,aAAa,CAAC;CACzB,GAAG;;CAEH;CACA;CACA,EAAE,SAAS,CAAC,MAAM,EAAE,KAAK,EAAE;CAC3B,IAAI,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC;CACrD,IAAI,OAAO,MAAM,IAAI,KAAK,CAAC;CAC3B,GAAG;CACH,CAAC;;AC/KI,OAAC,OAAO,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,YAAY,GAAG,CAAC,EAAE,OAAO,GAAG,EAAE,KAAK;CAC/E,EAAE,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;CACzC,EAAE,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;;CAEzC,EAAE,IAAI,KAAK,KAAK,IAAI,EAAE,OAAO;;CAE7B;CACA;CACA,EAAE,IAAI,KAAK,KAAK,IAAI,EAAE;CACtB,IAAI,cAAc,CAAC,WAAW,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;CACvD,GAAG;;CAEH;CACA;CACA,EAAE,IAAI,WAAW,GAAG,KAAK,CAAC;CAC1B,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;CAC9B,IAAI,MAAM,SAAS,GAAG,YAAY,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;;CAE/C;CACA,IAAI,MAAM,YAAY,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,MAAM,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,IAAI,CAAC,CAAC;CAC7F,IAAI,WAAW,GAAG,WAAW,IAAI,YAAY,CAAC;CAC9C,IAAI,IAAI,YAAY,EAAE;CACtB;CACA,MAAM,OAAO,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;CAC7B;CACA,MAAM,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;CAC7D,KAAK;CACL,GAAG;;CAEH;CACA,EAAE,IAAI,WAAW,EAAE;CACnB,IAAI,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;CAChC,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;CACrC,MAAM,OAAO,CAAC,GAAG,EAAE,CAAC;CACpB,KAAK;CACL,GAAG;CACH,CAAC,CAAC;;CAEF;CACA;CACA,MAAM,cAAc,GAAG,CAAC,WAAW,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,KAAK;CAC/D;CACA,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;CAClD,IAAI,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;CAC1B,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;CACpD,MAAM,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;CAE5B,MAAM,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;CAC9B,KAAK;CACL,GAAG;;CAEH;CACA,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;CACpD,IAAI,MAAM,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;CAC5B,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;CACpD,MAAM,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;CAE5B,MAAM,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;CAC9B,KAAK;CACL,GAAG;CACH,CAAC,CAAC;;;;;;;;;;;;;"}